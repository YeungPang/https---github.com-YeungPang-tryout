{
    "title": "Xemino",
    "version": "0.00",
    "main": "contact",
    "user": {
        "type": "organizer",
        "lang": "zh",
        "deflang": "zh"
    },
    "text": {
        "abortTimer": "Zeitmessung abbrechen",
        "attend": "出席",
        "brac": "(",
        "Camera": "拍照",
        "cashCoupon": "禮劵 / 利是",
        "cat61": "6-1",
        "cat71": "7-1",
        "colon": ":",
        "comma": ",",
        "contact": "Kontakte",
        "customer": "Kunden",
        "date": "Datum:  ",
        "dayAgo": " (vor #n# Tagen)",
        "dash": "-",
        "enattend": "attend",
        "email": "demo-user@sevconcept.ch",
        "encashCoupon": "Cash Coupon",
        "End": "Ende",
        "enguest": "Guest",
        "Gallery": "照片庫",
        "generateQRCode": "http://cirii.org/yhwedding.apk",
        "gift": "禮物",
        "guest": "婚禮嘉賓",
        "guestPic": "嘉賓照片",
        "hash": "#",
        "hourAgo": " (vor #n# Stunden)",
        "initDay": "__.__.____",
        "initTime": "__:__:__",
        "initTrackTime": "00:00",
        "interval": "Intervall:  ",
        "ket": ")",
        "minAgo": " (vor #n# Minuten)",
        "notice": "Notizen",
        "password": "Passwort",
        "plz": "Plz",
        "qrcodeGen": "QR Code generieren",
        "requiredField": "Das Feld ist obligatorisch!",
        "saveTimer": "Zeitmessung speichen",
        "scanqrcode": "QR Code scan",
        "search": "Search",
        "select one": "Wähle eins",
        "semicolon": ";",
        "service": "Dienstleistung:",
        "star": "*",
        "Start": "Starten ",
        "startTimer": "Zeitmessung starten",
        "Stop": "Stoppen",
        "stopTimer": "Zeitmessung stoppen",
        "submit": "Speichen",
        "tag": "Tag",
        "testText": "There is nothing yet!!!",
        "time": "Zeit:  ",
        "timer": "Zeitmessung",
        "title": "Titel",
        "trackedTime": "Gemessene Zeit",
        "xemino": "assets/images/xeminologo.png"
    },
    "blueprint": {
        "facts": {
            "services": [
                "Reinigung",
                "Montage"
            ]
        },
        "clauses": {
            "mainContent": "getTest({_test: 'calendarEvent'}) ⋀ (_editable ≔ false) ⋀ (_map ≔ mainMap) ⋀ ↲(mainDrawer)",
            "mainMap": "↲([drawerListMap('guest'), drawerListMap('photoGallery'), drawerBodyMap('qrcode')])"
        },
        "objects": {
            "guest": {
                "title": "Title;key;required",
                "icon": "guest",
                "pageId": 6,
                "columnId": 2,
                "titleName": "guest",
                "titleField": "title",
                "editing": false,
                "first": true,
                "attachment": [
                    "image"
                ],
                "cacheName": "guestMotes",
                "mapBody": "listBody",
                "listBody": "listPageF",
                "childPattern": "guest.cardPattern",
                "detail": "imageTaker.map",
                "getIconButton": [
                    "_item | ↲(Φ(IconButton, {_padding: ℛ(appRes, catIconPadding), _icon: 'camera', _iconSize: ℛ(sizeScale, Ø, 45.0), ",
                    "_onTap: {_processEvent: 'guest.takePicture', _inMap: {_item: _item}}}))"
                ],
                "getImage": [
                    "_item | (_i ≔ Φ(CircleAvatar, {_image: _item['image'], _backgroundColor: 'blue', _radius: 45.0})) ⋀ ",
                    "↲(Φ(TapItem, {_child: _i, _onTap: {_processEvent: 'guest.showPicture', _inMap: {_item: _item}}}))"
                ],
                "cardPattern": [
                    "_item, _tName, _user | (_ml ≔ {_listName: 'cf_members', _key: 'members', _item: _item}) ⋀ mapList(_ml) ⋀ cardConst ⋀ (_index ≔ _item['inx']) ⋀ ",
                    "(_rxName ≔ ('avatar' + _index)) ⋀ ((∃(_item['image']) ⋀ (_avatar ≔ getImage)) ⋁ (_avatar ≔ getIconButton)) ⋀ ",
                    "setResxValue(_rxName, _avatar) ⋀ (_leading ≔ Φ(Obx, {_valueName: _rxName})) ⋀ mapPat(rowColHeader, (start, start, min, Ø)) ⋀ ⋓({_title: Φ(Text, ",
                    "{_text: _item[_tName], _textStyle: ℛ(textStyle, 'Bold20')}), _padding: ℛ(appRes, aboxPadding), _members: _item['members'], _children: [], _leadingWidth: ℛ(sizeScale, Ø, 70.0)}) ⋀ ",
                    "((_m ∈ _members) ⋀ (_mt ≔ Φ(Text, {_text: _m, _textStyle: _dec})) ⋀ (_children ≪ _mt)) ⋀ (_sb ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 26.0)})) ⋀ ",
                    "(_subtitle ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 26.0), _child: Φ(Column)})) ⋀ (_lt ≔ Φ(ListTile)) ⋀ (_tt ≔ Φ(Text, {_text: _item['cf_table'], _textStyle: _dec})) ⋀ ",
                    "(_children ≔ [_sb, _tt]) ⋀ mapPat(rowColHeader, (center, start, max, Ø)) ⋀ (_tr ≔ Φ(Row)) ⋀ (((_user['type'] = 'guest') ⋀ (_children ≔ [_lt, _tr])) ⋁ ",
                    "((_sb3 ≔ Φ(SizedBox, {_width: ℛ(sizeScale, Ø, 15.0)})) ⋀ (_children ≔ [_sb3, Φ(CheckBox, ",
                    "{_fillColor: 'incorrect', _processEvent: 'guest.checkGuest', _value: _item['cf_cashCoupon'], _inMap: {_item: _item, _cType: 'cf_cashCoupon'}}), ",
                    "Φ(Text, {_text: getLangText('cashCoupon'), _textStyle: _dec}), _sb, Φ(CheckBox, ",
                    "{_fillColor: 'incorrect', _processEvent: 'guest.checkGuest', _value: _item['cf_gift'], _inMap: {_item: _item, _cType: 'cf_gift'}}), ",
                    "Φ(Text, {_text: getLangText('gift'), _textStyle: _dec}), _sb, Φ(CheckBox, ",
                    "{_fillColor: 'incorrect', _processEvent: 'guest.checkGuest', _value: _item['cf_attend'], _inMap: {_item: _item, _cType: 'cf_attend'}}), ",
                    "Φ(Text, {_text: getLangText('attend'), _textStyle: _dec})]) ⋀ (_r3 ≔ Φ(Row)) ⋀ ",
                    "(_children ≔ [_lt, _tr, _r3]))) ⋀ mapPat(rowColHeader, (start, spaceEvenly, min, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ",
                    "↲(Φ(Card))"
                ],
                "formAction": "_item | ↲({_tapAction: 'formScaffold', _map: {_object: 'guest', _formData: _item, _fsm: 'saveObjfsm'}})",
                "setPictureCache": "(_cache ≔ {_pageBody: 'imageTaker.map', _barTitle: ⊤(guestPic)}) ⋀ ↲(setCache('imagePickerCache', _cache))",
                "showPicture": "_item | setPictureCache ⋀ setCache('item', _item) ⋀ (_value ≔ _item['image']) ⋀ imageOutput ⋀ ↲(route('pageScaffold', {_item: _item, _cacheName: 'imagePickerCache'}))",
                "takePicture": "_item | setPictureCache ⋀ setCache('item', _item) ⋀ ↲(route('pageScaffold', {_item: _item, _cacheName: 'imagePickerCache'}))",
                "setPicture": [
                    "_value | (_item ≔ getCache('item')) ⋀ (_item['image'] ≔ _value) ⋀ (_rxName ≔ ('avatar' + _item['inx'])) ⋀ setResxValue(_rxName, getImage) ⋀ ",
                    "(_m ≔ {_inMap: {_cacheName: cacheName, _index: _item['inx']}, _xfile: _value, _processEvent: 'guest.addMoteAttachment'}) ⋀ ",
                    "xFileToUint8List(_m) ⋀ ↲(imageOutput)"
                ],
                "addMoteAttachment": "_cacheName, _index, _value |  (_m ≔ {_cacheName: cacheName, _index: _index, _value: _value}) ⋀ ↲(addAttachment(_m))",
                "checkGuest": [
                    "_item, _cType, _value | (_updates ≔ {}) ⋀ (_updates[_cType] ≔ _value) ⋀ (_m ≔ {_cacheName: cacheName, _index: _item['inx'], ",
                    "_updates: _updates}) ⋀ ↲(updateMote(_m))"
                ],
                "map": [
                    "setPictureCache ⋀ setCache(imageEvent,'guest.setPicture') ⋀ ↲(objMap({_obj: guest}))"
                ]
            },
            "qrcode": {
                "icon": "qrcode",
                "map": [
                    "(_text ≔ ⊤('generateQRCode')) ⋀ genQRCode ⋀ (_c ≔ Φ(Obx, {_child: Φ(Container, {_width: ℛ(swratio, Ø, 0.54), _height: ℛ(hratio, Ø, 0.3)}), _valueName: 'qrcodeBody'})) ⋀ ",
                    "(_child ≔ Φ(Container, {_child: _c, _width: ℛ(swratio, Ø, 0.5), _height: ℛ(hratio, Ø, 0.5)})) ⋀ ↲(Φ(Center))"
                ]
            },
            "imageTaker": {
                "icon": "camera",
                "map": [
                    "_event, _item | (((∃(_item['image'])) ⋀ (_c ≔ Φ(ImageAsset, {_image: _item['image']})) ⋀ (setResxValue('imageBody', _c))) ⋁ ",
                    "setResxValue('imageBody', Φ(Center, {_child: Φ(Icon, {_icon: 'camera', _iconSize: ℛ(sizeScale, Ø, 45.0), _iconColor: 'grey'})}))) ⋀ ",
                    "(_c ≔ Φ(Obx, {_child: Φ(Container, {_width: ℛ(swratio, Ø, 0.7), _height: ℛ(hratio, Ø, 0.7), _decoration: ℛ('diaDecoration')}), ",
                    "_valueName: 'imageBody'})) ⋀ ⋓({_height: ℛ(hratio, Ø, 0.0468), _width: ℛ(wratio, Ø, 0.35), _ts: ℛ(textStyle, ControlButton), ",
                    "_beginColor: ℛ(color, correct), _endColor: ℛ(color, correctGradEnd)}) ⋀ (_child ≔ Φ(Text, {_text: ⊤(Gallery), _textStyle: _ts})) ⋀ (_g ≔ Φ(TapItem, ",
                    "{_child: Φ(ColorButton), _onTap: {_processEvent: 'imageInput', _inMap: {_src: 'gallery', _event: _event}}})) ⋀ (_child ≔ Φ(Text, ",
                    "{_text: ⊤(Camera), _textStyle: _ts})) ⋀ (_s ≔ Φ(TapItem, {_child: Φ(ColorButton), _onTap: {_processEvent: 'imageInput', ",
                    "_inMap: {_src: 'camera', _event: _event}}})) ⋀ (_children ≔ [_g, _s]) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                    "(_children ≔ [_c, Φ(Row)]) ⋀ (_child ≔ Φ(Container, {_child: Φ(Column), _width: ℛ(swratio, Ø, 0.95), _height: ℛ('sizeScaffold')})) ⋀ ↲(Φ(Center))"
                ]
            },
            "photoGallery": {
                "icon": "images",
                "title": "Title;key;required",
                "image": "picture;image",
                "titleName": "Gallery",
                "titleField": "title",
                "entryDate": "Entry day;;system",
                "editing": true,
                "attachment": [
                    "image"
                ],
                "photoEvent": [
                    "_value | (_data ≔ {image: _value}) ⋀ (_listItemDetail ≔ getCache('mainListPageCache')) ⋀ (_dataCache ≔ _listItemDetail['_dataCache']) ⋀ ",
                    "(_dataList ≔ _dataCache['_dataList']) ⋀ (_data ≫ _dataList) ⋀ (_listBody ≔ 'photoGallery.galleryBody') ⋀ ↲(drawerfsm)"
                ],
                "fields": [
                    "meta",
                    "image",
                    "entryDate"
                ],
                "pageId": 6,
                "columnId": 1,
                "mapBody": "listBody",
                "remap": "_value | ↲(remapData({_value: _value, _fields: ['image']}))",
                "listBody": "photoGallery.galleryBody",
                "childPattern": "photoGallery.imgPattern",
                "imgPattern": "_item, _index, _tName, _user | (_image ≔ _item['image']) ⋀ ↲(Φ(ImageFitContainer))",
                "galleryBody": "_pageId, _titleName, _listItemDetail | ↲(Φ(Obx, {_child: Φ(Container), _valueName: 'mainListPage'}))",
                "pictureView": "_item | τ('pictureView') ⋀ ⋓({_image: _item['image'], _width: ℛ(infinity), _height: ℛ(infinity)})  ⋀ ↲(Φ(ImageFitContainer))",
                "fAction": [
                    "(_cache ≔ {_pageBody: 'imageTaker.map', _barTitle: ⊤(guestPic)}) ⋀ setCache(imageEvent, 'photoGallery.photoEvent') ⋀ setCache('imagePickerCache', _cache) ⋀ ",
                    "(_item ≔ {}) ⋀ ↲(guest.takePicture)"
                ],
                "showPicture": [
                    "_item | (_cache ≔ {_pageBody: 'photoGallery.pictureView', _barTitle: ⊤(guestPic), _item: _item}) ⋀ setCache('imagePickerCache', _cache) ⋀ ",
                    "τ('showPicture') ⋀ ↲(route('pageScaffold', {_item: _item, _cacheName: 'imagePickerCache'}))"
                ],
                "map": [
                    "↲({_dataCache: {_dataList: _value, _plen: 66, _nrlen: 11, _prlen: 11}, _quilted: true, _floating: 'photoGallery.fAction', ",
                    "_onTap: createEvent('photoGallery.showPicture'), _remap: 'photoGallery.remap'} ⊌ objMap({_obj: photoGallery}))"
                ]
            },
            "fcalendar": {
                "icon": "calendar",
                "map": [
                    "↲(Φ(Calendar))"
                ]
            },
            "todo": {
                "icon": "checklist",
                "map": [
                    "(_data ≔ getTest({_test: 'toDoList'})) ⋀ setResxValue('todo', _data) ⋀ ↲(Φ(CheckList, {_rxName: 'todo'}))"
                ]
            }
        }
    },
    "patterns": {
        "facts": {
            "objStack": [],
            "first": true,
            "header": "label;type;entry;icon;iconColor;func;tap;prefix;",
            "attrHeader": [
                "label",
                "type",
                "entry"
            ],
            "patHeader": [
                "hratio",
                "wratio",
                "color",
                "radius",
                "alignment",
                "size"
            ],
            "rowColHeader": [
                "crossAxisAlignment",
                "mainAxisAlignment",
                "mainAxisSize",
                "verticalDirection"
            ]
        },
        "clauses": {
            "mainView": "setBlueprint() ⋀ ↲(mainContent)",
            "mainDrawer": [
                "_editable, _map | ⋓({_text: ℛ(model, title), _key: key(), _width: ℛ(swratio, Ø, 0.25), _iconColor: 'white'}) ⋀ ",
                "⋓({_height: _width, _iconSize: (_width * 0.6)}) ⋀ (_color ≔ _iconColor) ⋀ (_child ≔ Φ(ImageAsset, {_name: ⊤(xemino)})) ⋀ ",
                "(_ic1 ≔ Φ(Container)) ⋀ (_children ≔ [_ic1]) ⋀ (_n ≔ {_i: 0}) ⋀ (_dBody ≔ getResxValue('drawerBody')) ⋀ ((_elem ∈ _map) ⋀ ",
                "⋓(_elem) ⋀ (_child ≔ Φ(IconButton)) ⋀ (_children ≪ Φ(SizedBox)) ⋀ ((∄(_dBody) ⋀ (_n['_i'] = 0) ⋀ (_n['_i'] ≔ 1) ⋀ (_dBody ≔ _mapBody(_map))) ⋁ (true)) ⋀ ",
                "(((_editable) ⋀ (_child ≔ Φ(FloatingAction, {_icon: 'add', _iconColor: 'white', _iconSize: 40.0, _onTap: {_processEvent: 'floatingAction'}})) ⋀ ",
                "(_valueName ≔ 'editing') ⋀ (_floatingAction ≔ Φ(Visible))) ⋁ (true))) ⋀ setResxValue('drawerBody', _dBody) ⋀ (_body ≔ Φ(Obx, {_valueName: 'drawerBody'})) ⋀ ",
                "mapPat(rowColHeader, (center, start, max, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ (_drawer ≔ Φ(Drawer, {_child: Φ(SingleChildScrollView), _width: _width})) ⋀ ",
                "⋓({_title: mainAppBar}) ⋀ ↲(scaffoldPat)"
            ],
            "drawerListMap": [
                "_objName | (_object ≔ ç(_obj_objName)) ⋀ (_obj  ≔ (_objName)) ⋀ (_listItemDetail ≔ (_obj['map'])) ⋀ (_obj['listItemDetail'] ≔ _listItemDetail) ⋀ ",
                "↲({_object: _object, _icon: _obj['icon'], _mapBody: _obj['mapBody'], _map: {_listItemDetail: _listItemDetail}, ",
                "_onTap: {_func: 'fsmEvent', _tapAction: 'drawerfsm', _map: {_listItemDetail: _listItemDetail, _listBody: _obj['listBody']}}})"
            ],
            "drawerBodyMap": "_obj | ↲({_object: ç(_obj), _icon: _obj['icon'], _onTap: {_func: 'fsmEvent', _tapAction: 'bodyfsm', _map: {_obj: _obj['map']}}})",
            "objMap": [
                "_obj | (_n ≔ getLangText(_obj['titleName'])) ⋀ ↲({_pageId: _obj['pageId'], _cacheName: _obj['cacheName'], _titleName: _n, _childPattern: _obj['childPattern'], ",
                "_listBody: _obj['listBody'], _editing: _obj['editing'], _childMap: {_tName: _obj['titleField'], _fName: 'listData', _user: ℛ(model, 'user')}, ",
                "_columnId: _obj['columnId'], _attachment: _obj['attachment'], _groupName: 'mainListPage', _pageBody: _obj['detail']})"
            ],
            "drawerItem": [
                "_name, _map, _height, _iconSize, _iconColor | τ('drawItem') ⋀ (_icon ≔ _name) ⋀ ((_name = 'logo') ⋀ (_child ≔ Φ(Icon)) ⋀ ↲(Φ(Container))) ⋁ ",
                "((_onTap ≔ {_func: 'fsmEvent', _tapAction: 'drawerfsm', _map: _map}) ⋀ (_child ≔ Φ(IconButton)) ⋀ ↲(Φ(SizedBox)))"
            ],
            "mainBottomBar": [
                "_pageController, _pageNoti, _totalPages | ⋓({_inxIcon: Φ(Icon, {_icon: 'complete', _iconColor: 'btnBlue', ",
                " _iconSize: 17.0}), _nonInxIcon: Φ(Icon, {_icon: 'incomplete', _iconColor: 'btnBlue', ",
                " _iconSize: 17.0})}) ⋀ ↲(Φ(PageBar))"
            ],
            "scaffoldPat": [
                "_title, _child, _body, _key, _flexibleSpace, _leading, _bottomBar, _drawer, _floatingAction | ",
                "mapPat(patHeader, (0.055, Ø, #FFFFFF, Ø, Ø, Ø)) ⋀ (_toolbarHeight ≔ ℛ(appBarHeight)) ⋀ ",
                "(∄(_drawer) ⋀ ↲(Φ(Scaffold, {_bottomNavigationBar: _bottomBar, _appBar: Φ(AppBar), _body: _body, _floatingAction: _floatingAction}))) ⋁ ",
                "↲(Φ(Scaffold, {_bottomNavigationBar: _bottomBar, _appBar: Φ(AppBar), _body: _body, _drawer: _drawer, _floatingAction: _floatingAction}))"
            ],
            "mainAppBar": [
                "_text, _flexibleSpace | (_tT ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, Topic)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ ",
                "(_icon ≔ 'chat') ⋀ (_ic2 ≔ Φ(IconButton)) ⋀ (_icon ≔ 'settings') ⋀ (_ic3 ≔ Φ(IconButton)) ⋀ ",
                "(_icon ≔ 'search') ⋀ (_onTap ≔ {_func: 'search', _map: {_searchTypes: 'customer;contact;plz;tag'}}) ⋀ (_ic1 ≔ Φ(IconButton)) ⋀ ",
                "(_ic ≔ Φ(Row, {_children: [_ic1, _ic2, _ic3], _mainAxisAlignment: decode(mainAxisAlignment, spaceEvenly)})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tT]) ⋀ ↲(Φ(Row))"
            ],
            "mainAppBar1": [
                "_text, _flexibleSpace | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, Topic)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ ",
                "(_icon ≔ 'chat') ⋀ (_ic2 ≔ Φ(IconButton)) ⋀ (_icon ≔ 'settings') ⋀ (_ic3 ≔ Φ(IconButton)) ⋀ ",
                "(_icon ≔ 'search') ⋀ (_onTap ≔ {_func: 'search', _map: {_searchTypes: 'customer;contact;plz;tag'}}) ⋀ (_ic1 ≔ Φ(IconButton)) ⋀ ",
                "(_ic ≔ Φ(Row, {_children: [_ic1, _ic2, _ic3], _mainAxisAlignment: decode(mainAxisAlignment, spaceEvenly)})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "hamburgerMenu": [
                "↲(Φ(IconButton, {_icon: 'menu', _iconColor: ℛ(color, 'white')}))"
            ],
            "floatingAction": "(_action ≔ getCache('floatingAction')) ⋀ ↲(_action)",
            "listBody": "_pageId, _titleName, _listItemDetail | listPagefsm ⋀ ↲(listPageF)",
            "mainContainer": "_child, _alignment | ↲(Φ(Container, {_width: ℛ(swratio, Ø, 1.0), _height: ℛ(hratio, Ø, 0.8), _child: _child}))",
            "listPageF": [
                "_value, _titleName | mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ ",
                "(_tText ≔ Φ(Text, {_textStyle: ℛ(textStyle, Title)})) ⋀ (_oText ≔ (Φ(Obx, {_child: _tText, _valueName: 'titleName', _valueKey: '_text'}))) ⋀ ",
                "(_tc ≔ ℛ(textController)) ⋀ (_fMap ≔ {_groupName: 'mainListPage', _textController: _tc}) ⋀ (_fEvent ≔ {_func: 'filter', _tapAction: _fMap, _map: _fMap}) ⋀ ",
                "⋓({_iconColor: 'grey700', _icon: 'plus', _iconSize: 20.0, _sd: Φ(SizedBox, {_width: ℛ(wratio, Ø, 0.03)})}) ⋀ (_ic1 ≔ Φ(IconText)) ⋀ ",
                "(_ic3 ≔ Φ(IconText, {_icon: 'filter', _iconSize: _iconSize,  _onTap: _fEvent})) ⋀ ",
                "(_ic4 ≔ Φ(IconText, {_icon: 'sortDown', _iconSize: _iconSize,  _onTap: {_func: 'sort',  _tapAction: {_groupName: 'mainListPage'}}})) ⋀ ",
                "(_ic5 ≔ Φ(IconText, {_icon: 'sortUp', _iconSize: _iconSize, _onTap: {_func: 'sort',  _tapAction: {_groupName: 'mainListPage', _ascending: false}}})) ⋀ ",
                "(_ic6 ≔ Φ(IconText, {_icon: 'cached', _iconSize: _iconSize,  _onTap: {_func: 'refresh',  _tapAction: {_groupName: 'mainListPage'}}})) ⋀ ",
                "(_children ≔ [_sd, _ic3, _sd, _ic4, _sd, _ic5, _sd, _ic6]) ⋀ (_r ≔ Φ(Row)) ⋀ ",
                "(_ft ≔ Φ(Container, {_child: Φ(InTextField, {_textController: _tc, _autofocus: false, _complete: _fEvent, _focusNode: ℛ('focusNode'), _isState: true, _clear: true}), _width: ℛ(wratio, Ø, 0.4), ",
                "_height: ℛ(hratio, Ø, 0.05)})) ⋀ (_children ≔ [_oText]) ⋀ (_sb ≔ Φ(Container, {_width: ℛ(wratio, Ø, 0.95), _child: Φ(Row)})) ⋀ ",
                "_mainListPage ≔ Φ(Obx, {_child: Φ(Container), _valueName: 'mainListPage'}) ⋀ setFact('first', false) ⋀ ↲(Φ(Column, {_children: [_sb, _mainListPage]}))"
            ],
            "listPageF1": [
                "_value, _titleName | mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ ",
                "(_tText ≔ Φ(Text, {_textStyle: ℛ(textStyle, Title)})) ⋀ (_oText ≔ (Φ(Obx, {_child: _tText, _valueName: 'titleName', _valueKey: '_text'}))) ⋀ ",
                "(_tc ≔ ℛ(textController)) ⋀ (_fMap ≔ {_groupName: 'mainListPage', _textController: _tc}) ⋀ (_fEvent ≔ {_func: 'filter', _tapAction: _fMap, _map: _fMap}) ⋀ ",
                "⋓({_iconColor: 'grey700', _icon: 'plus', _iconSize: 20.0, _sd: Φ(SizedBox, {_width: ℛ(wratio, Ø, 0.03)})}) ⋀ (_ic1 ≔ Φ(IconText)) ⋀ ",
                "(_ic3 ≔ Φ(IconText, {_icon: 'filter', _iconSize: _iconSize,  _onTap: _fEvent})) ⋀ ",
                "(_ic4 ≔ Φ(IconText, {_icon: 'sortDown', _iconSize: _iconSize,  _onTap: {_func: 'sort',  _tapAction: {_groupName: 'mainListPage'}}})) ⋀ ",
                "(_ic5 ≔ Φ(IconText, {_icon: 'sortUp', _iconSize: _iconSize, _onTap: {_func: 'sort',  _tapAction: {_groupName: 'mainListPage', _ascending: false}}})) ⋀ ",
                "(_ic6 ≔ Φ(IconText, {_icon: 'cached', _iconSize: _iconSize,  _onTap: {_func: 'refresh',  _tapAction: {_groupName: 'mainListPage'}}})) ⋀ ",
                "(_children ≔ [_sd, _ic3, _sd, _ic4, _sd, _ic5, _sd, _ic6]) ⋀ (_r ≔ Φ(Row)) ⋀ ",
                "(_ft ≔ Φ(Container, {_child: Φ(InTextField, {_textController: _tc, _autofocus: false, _complete: _fEvent, _focusNode: ℛ('focusNode'), _isState: true, _clear: true}), _width: ℛ(wratio, Ø, 0.4), ",
                "_height: ℛ(hratio, Ø, 0.05)})) ⋀ (_children ≔ [_oText, _ft,  _r]) ⋀ (_sb ≔ Φ(Container, {_width: ℛ(wratio, Ø, 0.95), _child: Φ(Row)})) ⋀ ",
                "_mainListPage ≔ Φ(Obx, {_child: Φ(Container), _valueName: 'mainListPage'}) ⋀ setFact('first', false) ⋀ ↲(Φ(Column, {_children: [_sb, _mainListPage]}))"
            ],
            "listInputHolder": [
                "(_child ≔ Φ(ColorButton, {_height: ℛ(hratio, Ø, 0.05), _width: ℛ(wratio, Ø, 0.4), _borderColor: 'grey'})) ⋀ ",
                "(_onTap ≔ {_func: 'setResxValue', _tapAction: ['filterInput', filterInput]}) ⋀ ↲(setResxValue('filterInput', Φ(TapItem)))"
            ],
            "listPage": [
                "_value | (_listItemDetail ≔ getCache('mainListPageCache')) ⋀ ⋓(_listItemDetail) ⋀ ((∃(_remap) ⋀ (_value ≔ (_remap))) ⋁ (true)) ⋀ ",
                "((∄(_dataCache) ⋀ (_dataCache ≔ {_dataList: _value, _plen: 30, _nrlen: 2, _prlen: 2})) ⋁ ",
                "(_dataCache['_dataList'] ≔ _value)) ⋀ ⋓({_child: Φ(Paging), _alignment: decode(alignment, topCenter)}) ⋀ ↲(mainContainer)"
            ],
            "genAppBar": [
                "_flexibleSpace, _text, _leading | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_ic ≔ hamburgerMenu) ⋀ ",
                "(_leading ≔ Φ(IconButton, {_icon: 'back', _iconColor: ℛ(color, 'white'), _onTap: {_func: popRoute}})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "itItems": "_data, _pat, _dec, _height | (_children ≔ []) ⋀ ((∀(_item) ∈ _data) ⋀ (_c ≔ _pat) ⋀ (_children ≪ _c)) ⋀ ↲(_children)",
            "addItem": "_item, _dec, _tName, _chi | (∄(_item[_tName]) ⋀ ↲(true)) ⋁ ↲(_chi ≪ (Φ(Text, {_text: _item[_tName], _textStyle: _dec})))",
            "addPat": "_item, _dec, _tName, _pat, _chi | (∄(_item[_tName]) ⋀ ↲(true)) ⋁ ↲(_pat)",
            "textTile": "_item, _dec | ↲(Φ(Text, {_text: _item, _textStyle: _dec}))",
            "telRow": [
                "_tel, _pref, _dec, _height | (_tText ≔ (_pref + ⊤(colon) + ' ' + _tel)) ⋀ ",
                "(_child ≔ Φ(TextIconRow, {_text: _tText, _textStyle: _dec, _fitted: true, _onTap: {_func: toTel, _tapAction: _tel}, _iconColor: 'red', _icon: 'phone'})) ⋀ ",
                "↲(Φ(SizedBox))"
            ],
            "telTile": [
                "_tel, _pref, _dec, _height | (_tText ≔ (_pref + ⊤(colon) + ' ' + _tel)) ⋀ (_t ≔ Φ(Text, {_text: _tText, _textStyle: _dec})) ⋀ ",
                "(_ic ≔ Φ(IconButton, {_onTap: {_func: toTel, _tapAction: _tel}, _iconColor: 'red', _icon: 'phone'})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_children ≔ [_t, _ic]) ⋀ (_child ≔ Φ(Row)) ⋀ ↲(Φ(SizedBox))"
            ],
            "textButtonTile": [
                "_item, _dec | ⋓({_color: ℛ(color, 'greyText'), _width: (#(_item) * ℛ(sizeScale, Ø, 8.0)), ",
                "_noShadow: true, _height: ℛ(size20), _textAlign: decode(textAlign, center)}) ⋀ ",
                "_child ≔ Φ(Text, {_text: _item, _textStyle: ℛ(textStyle, faintTxtStyle)}) ⋀ ↲(Φ(ColorButton))"
            ],
            "timeEventRow": [
                "_m, _label, _labelStyle, _textStyle | labelStyle ⋀ (_t ≔ Φ(Text, {_text: ⊤(_label), _textStyle: _labelStyle})) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                "(_width ≔ ℛ(wratio, Ø, 0.3)) ⋀ (_children ≔ [Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: ('day' + _label)}), ",
                "Φ(IconButton, {_onTap: {_func: pickDate, _tapAction: {_map: _m, _event: ('day' + _label)}}, _iconColor: 'btnBlue', _icon: 'calendar', _padding: 2.0})]) ⋀ ",
                "(_child ≔ Φ(Row)) ⋀ (_d ≔ Φ(SizedBox)) ⋀ (_children ≔ [Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: ('time' + _label)}), ",
                "Φ(IconButton, {_onTap: {_func: pickTime, _tapAction: {_map: _m, _event: ('time' + _label)}}, _iconColor: 'btnBlue', _icon: 'pickTime', _padding: 2.0})]) ⋀ ",
                "(_child ≔ Φ(Row)) ⋀ (_children ≔ [_t, _d, Φ(SizedBox)]) ⋀ ↲(Φ(Row))"
            ],
            "labelOText": [
                "_label, _labelStyle, _textStyle, _valueName | labelStyle ⋀ ",
                "↲([Φ(Text, {_text: ⊤(_label), _textStyle: _labelStyle}), Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: _valueName})])"
            ],
            "labelStyle": "_label, _labelStyle, _textStyle| ↲((∄(_labelStyle) ⋀ (_labelStyle ≔ _textStyle)) ⋁ (∄(_textStyle) ⋀ (_textStyle ≔ _labelStyle)) ⋁ (true))",
            "timerSERows": [
                "_m, _labelStyle, _dateTimeStyle | (_children ≔ [timeEventRow(_m, 'Start', _labelStyle, _dateTimeStyle), ",
                "timeEventRow(_m, 'Stop', _labelStyle, _dateTimeStyle)]) ⋀ mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                "↲(Φ(Container, {_child: Φ(Column), _height: ℛ(hratio, Ø, 0.15)}))"
            ],
            "timerInit": [
                "setResxValue(('trackedTime'), ⊤('initTrackTime')) ⋀ setResxValue(('dayStart'), ⊤('initDay')) ⋀ ",
                "setResxValue(('timeStart'), ⊤('initTime')) ⋀ setResxValue(('dayStop'), ⊤('initDay')) ⋀ ",
                "setResxValue(('timeStop'), ⊤('initTime')) ⋀ ↲(true)"
            ],
            "setTimerEvent": "_map | ↲(setTimer(_map))",
            "timerSwitch": [
                "_switch, _map | (_mTimer ≔ _map['_mTimer']) ⋀ (_mTimer ⊌ {_switch: _switch}) ⋀ (((_switch) ⋀ (_m ≔ {_map: _map, _event: 'timerStart'})) ⋁ ",
                "(_m ≔ {_map: _map, _event: 'timerStop'})) ⋀ ↲(setTimer(_m))"
            ],
            "valuePick": "_value, _map | (_mTimer ≔ _map['_mTimer']) ⋀ ↲(_mTimer ⊌ {_value: _value})",
            "tabSubView": [
                "_item, _barTitle, _obj | (_viewMap ≔ {_pageId: _obj['subviewId'], _pageSubmote: _item['id'], _cols: _obj['subviewCols'], ",
                "_processEvent: createEvent(['tabPage', {_item: _item, _obj: _obj}])}) ⋀ (_valueName ≔ _obj['valueName']) ⋀ ↲(subviewPage)"
            ],
            "drawerfsm": "_listItemDetail, _listBody | popRoute() ⋀ listPagefsm ⋀ ↲(setResxValue('drawerBody', _listBody))",
            "bodyfsm": "_obj | popRoute() ⋀ setResxValue('editing', false) ⋀ ↲(setResxValue('drawerBody', _obj()))",
            "listPagefsm": [
                "_listItemDetail | ℛ(setCache, 'mainListPageCache', _listItemDetail) ⋀ (_event ≔ 'loadData') ⋀ listDatafsm ⋀ ((∃(_listItemDetail['_editing']) ⋀ ",
                "(_editing ≔ _listItemDetail['_editing']) ⋀ setResxValue('editing', _editing) ⋀ setCache('floatingAction', _listItemDetail['_floating'])) ⋁ (true)) ⋀ ",
                "↲(ℛ(setResxValue, 'titleName', _listItemDetail['_titleName']))"
            ],
            "listDatafsm": [
                "_event, _value | ((_event = 'loadData') ⋀ dataLoading ⋀ (_m ≔ ℛ(getCache, 'mainListPageCache')) ⋀ ",
                "ℛ(setCache, 'mainListPageEvent', createEvent(['listDatafsm', {_event: 'loaded'}])) ⋀ ↲(getGroupList(_m))) ⋁ ",
                "((_event = 'refresh') ⋀ ↲refresh({_groupName: 'mainListPage'})) ⋁ ",
                "((_event = 'loaded') ⋀ ((∄(_value) ⋀ ↲(ℛ(setResxValue, 'mainListPage', mainContainer))) ⋁ ↲(ℛ(setResxValue, 'mainListPage', listPage)))) ⋁ ",
                "((_event = 'selected') ⋀ setCache('tabInx', 0) ⋀ setCache('selItem', _value) ⋀ ↲(route('pageScaffold', {_item: _value, _cacheName: 'mainListPageCache'})))"
            ],
            "addObjfsm": [
                "(_inx ≔ getCache('tabInx')) ⋀ (_listItemDetail ≔ getCache('mainListPageCache')) ⋀ (_subviewObj ≔ _listItemDetail['_subviewObj']) ⋀ ",
                "↲(route('formScaffold', {_object: _subviewObj[_inx], _formData: {}, _fsm: 'saveObjfsm'}))"
            ],
            "saveMainfsm": "popRoute() ⋀ ↲(refresh({_groupName: 'mainListPage'}))",
            "saveObjfsm": "popRoute() ⋀ popRoute() ⋀ ↲(route('pageScaffold', {_item: getCache('selItem'), _cacheName: 'mainListPageCache'}))",
            "dataLoading": [
                "⋓({_child: Φ(ProgressText, {_text: 'Loading data with end to end encryption ....', _textStyle : ℛ(textStyle, Normal16)}), ",
                "_alignment: decode(alignment, center)}) ⋀ ↲(ℛ(setResxValue, 'mainListPage', mainContainer))"
            ],
            "tabPage": [
                "_item, _obj, _value | mapPat(rowColHeader, (center, start, max, Ø)) ⋀ (_n ≔ 0) ⋀ (_subviews ≔ _obj['subviews']) ⋀ ",
                "⋓({_t: #(_subviews), _tabs: _obj['subviewTabs'], _top: _obj['topCard'], _pid: _item['id'], ",
                "_tc: []}) ⋀ (_children ≔ [_top, tabView]) ⋀ ↲(ℛ(setResxValue, _obj['valueName'], Φ(Column)))"
            ],
            "tapIconElem": [
                "_icon, _text, _iconColor, _onTap, _tapAction | ⋓({_borderColor: ℛ(color, 'grey'), _borderWidth: 2.0, _width: ℛ(swratio, Ø, 0.25), _noShadow: true, ",
                "_textAlign: decode(textAlign, center), _iconSize: 30.0}) ⋀ ",
                "⋓({_child: Φ(Text), _i: Φ(Icon)}) ⋀ ",
                "(_child ≔ Φ(Column, {_children: [_i, Φ(Container)], _mainAxisAlignment: decode(mainAxisAlignment, spaceEvenly)})) ⋀ ",
                "(_height ≔ (_width * 0.85)) ⋀ ↲(Φ(TapItem, {_child: Φ(ColorButton), _onTap: _onTap, _tapAction: _tapAction}))"
            ],
            "pageScaffold": [
                "_item, _cacheName | (_cache ≔ getCache(_cacheName)) ⋀ ⋓(_cache) ⋀ (_body ≔ _pageBody) ⋀ ((∃(_editable) ⋀ ",
                "(_floatingAction ≔ Φ(FloatingAction, {_icon: 'add', _iconColor: 'white', _iconSize: 40.0, _onTap: _onTap}))) ⋁ (true)) ⋀ ",
                "⋓({_title: pageAppBar, _leading: Φ(IconButton, {_icon: 'back', _iconColor: ℛ(color, 'white'), _onTap: {_func: popRoute}})}) ⋀ ↲(scaffoldPat)"
            ],
            "pageAppBar": [
                "_flexibleSpace, _barTitle | (_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ ",
                "↲(Φ(Text, {_text: _barTitle, _textStyle: ℛ(textStyle, TopicTxtStyle)}))"
            ],
            "subviewPage": [
                "_item, _valueName, _viewMap | (getResxValue(_valueName) ⋁ ℛ(setResxValue, _valueName, Φ(ProgressText, {_text: 'Loading data ....', ",
                "_textStyle : ℛ(textStyle, Normal16)}))) ⋀ (getSubview(_viewMap)) ⋀ ↲(Φ(Obx, {_child: Φ(Container), _valueName: _valueName}))"
            ],
            "tabView": [
                "_value, _subviews, _tabs, _n, _t, _tc, _pid | ((_n = _t) ⋀ (_children ≔ _tc) ⋀ (_physics ≔ ℛ(appRes, clampingScrollPhysics)) ⋀ ",
                "(_inxName ≔ 'tabInx') ⋀ ↲(Φ(TabColumn))) ⋁ (mapPat(rowColHeader, (center, start, max, Ø)) ⋀ ⋓({_data: _value[_n], _pat: _subviews[_n]}) ⋀ ",
                "(_c ≔ _pat) ⋀ (_tc ≪ _c) ⋀ (_n ≔ (_n + 1)) ⋀ ↲(tabView))"
            ],
            "itemList": "_data, _pat | (_children ≔ itItems) ⋀ ↲(Φ(ListView))",
            "card": [
                "_child |⋓({_child: Φ(Padding, {_child: _child, _padding: ℛ(appRes, boxPadding)}), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.015)}) ⋀ ↲(Φ(SizedBox, {_child: Φ(Card), _width: ℛ(swratio, Ø, 0.995)}))"
            ],
            "formScaffold": [
                "_object, _formData, _fsm | (_barTitle ≔ ⊤(ç(_object))) ⋀ ⋓({_title: pageAppBar, ",
                "_body: Φ(Container, {_child: Φ(EntityForm, {_object: ç(_object), _formData: _formData, _onTap: {_func: 'fsmEvent', _tapAction: ç(_fsm)}})})}) ⋀ ↲(scaffoldPat)"
            ],
            "padRow": "_children, _alignment | mapPat(rowColHeader, (center, _alignment, max, Ø)) ⋀ ↲(Φ(Padding, {_child: Φ(Row), _padding: ℛ(h20Padding)}))",
            "inputQRCode": [
                "(_fEvent ≔ {_func: 'fsmEvent', _tapAction: 'genQRCode'}) ⋀ ",
                "(_tc ≔ getCache('qrcodetc')) ⋀ ((∄(_tc) ⋀ (_tc ≔ ℛ(textController)) ⋀ setCache('qrcodetc', _tc)) ⋁ ",
                "(((_text ≔ getText({_textController: _tc, _clear: true}) ⋀ ∃(_text) ⋀ ↲(genQRCode)) ⋁ (true)))) ⋀ ",
                "(_tf ≔ Φ(InTextField, {_textController: _tc, _autofocus: false, _maxLines: 40, _complete: _fEvent, _clear: true})) ⋀ ",
                "↲(setResxValue('qrcodeBody', _tf))"
            ],
            "genQRCode": "_text | ↲(setResxValue('qrcodeBody', Φ(QRCodeGen)))",
            "scanQR": "(_event ≔ createEvent('scanOutput')) ⋀ ↲(scanQRCode({_processEvent: _event, _errEvent: _event}))",
            "scanOutput": "_value | (_child ≔ Φ(Text, {_text: _value, _maxLines: 100})) ⋀ (_t ≔ Φ(SingleChildScrollView, {_child: Φ(Container)})) ⋀ ↲(setResxValue('qrcodeBody', _t))",
            "imageInput": [
                "_src | ↲(imagePicker({_processEvent: getCache('imageEvent'), _errEvent: getCache('imageEvent'), _imageSource: _src}))"
            ],
            "imageOutput": "_value | (_c ≔ Φ(ImageFitContainer, {_image: _value})) ⋀ ↲(setResxValue('imageBody', _c))",
            "cardConst": "_dec, _div, _height | ↲(⋓({_dec: ℛ(textStyle, Normal16), _div: Φ(Divider, {_thickness: 1.5}), _height: ℛ(hratio, Ø, 0.0468)}))",
            "testBox": "(_text ≔ ⊤(testText)) ⋀ (_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
        }
    },
    "stateData": {}
}