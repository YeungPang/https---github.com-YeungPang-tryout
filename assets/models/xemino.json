{
    "title": "Xemino",
    "version": "0.00",
    "main": "contact",
    "text": {
        "abortTimer": "Zeitmessung abbrechen",
        "colon": ":",
        "comma": ",",
        "contact": "Kontakte",
        "date": "Datum:  ",
        "End": "Ende",
        "hash": "#",
        "interval": "Intervall:  ",
        "saveTimer": "Zeitmessung speichen",
        "select one": "Wähle eins",
        "semicolon": ";",
        "service": "Dienstleistung:",
        "Start": "Start",
        "startTimer": "Zeitmessung starten",
        "stopTimer": "Zeitmessung stoppen",
        "testText": "There is nothing yet!!!",
        "time": "Zeit:  ",
        "title": "Titel"
    },
    "config": {
        "contact": {
            "header": "company;name;address;tel",
            "elemList": [
                "Seveco AG;Yeung Pang;[Untermüli 6,5630 Zug];[+41 56 667 47 90,+41 76 399 2019]",
                "Pangaroo GmbH;Benjamin Pang;[Adam-Friedrich-Molz-Gasse 8,2502 Biel];+41 76 379 2849",
                "Seveco Software AG;Werner Hofer;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 478 9321",
                "Seveco Software AG;Reto Leutwyler;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 444 2370",
                "Seveco AG;Yeung Pang;[Untermüli 6,5630 Zug];[+41 56 667 47 90,+41 76 399 2019]",
                "Pangaroo GmbH;Benjamin Pang;[Adam-Friedrich-Molz-Gasse 8,2502 Biel];+41 76 379 2849",
                "Seveco Software AG;Werner Hofer;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 478 9321",
                "Seveco Software AG;Reto Leutwyler;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 444 2370"
            ]
        }
    },
    "patterns": {
        "facts": {
            "patHeader": [
                "hratio",
                "wratio",
                "color",
                "radius",
                "alignment",
                "size"
            ],
            "rowColHeader": [
                "crossAxisAlignment",
                "mainAxisAlignment",
                "mainAxisSize",
                "verticalDirection"
            ],
            "services": [
                "Reinigung",
                "Montage"
            ]
        },
        "clauses": {
            "mainView": "setConfig(config, patterns) ⋀ ↲(mainScaffold)",
            "mainScaffold": [
                "⋓({_text: ℛ(model, title), _key: key(), _pageController: ℛ(pageController), _pageNoti: 'pageNoti'}) ⋀ ℛ(setResxValue, _pageNoti, 0) ⋀ ",
                "(_body ≔ mainBody) ⋀ ⋓({_title: mainAppBar, _bottomBar: mainBottomBar, _leading: hamburgerMenu}) ⋀ ↲(scaffoldPat)"
            ],
            "mainBottomBar": [
                "_pageController, _pageNoti, _totalPages | ⋓({_inxIcon: Φ(Icon, {_icon: 'complete', _iconColor: 'btnBlue', ",
                " _iconSize: 17.0}), _nonInxIcon: Φ(Icon, {_icon: 'incomplete', _iconColor: 'btnBlue', ",
                " _iconSize: 17.0})}) ⋀ ↲(Φ(PageBar))"
            ],
            "scaffoldPat": [
                "_title, _child, _body, _key, _flexibleSpace, _leading, _bottomBar | ",
                "mapPat(patHeader, (0.055, Ø, #FFFFFF, Ø, Ø, Ø)) ⋀ (_toolbarHeight ≔ ℛ(appBarHeight))",
                "↲(Φ(Scaffold, {_bottomNavigationBar: _bottomBar, _appBar: Φ(AppBar), _body: _body}))"
            ],
            "mainAppBar": [
                "_text, _flexibleSpace | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, Topic)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ ",
                "(_icon ≔ 'home') ⋀  (_ic1 ≔ Φ(IconButton)) ⋀ (_icon ≔ 'chat') ⋀ (_ic2 ≔ Φ(IconButton)) ⋀ (_icon ≔ 'settings') ⋀ ",
                "(_ic3 ≔ Φ(IconButton)) ⋀ (_ic ≔ Φ(Row, {_children: [_ic1, _ic2, _ic3], _mainAxisAlignment: decode(mainAxisAlignment, spaceEvenly)})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "hamburgerMenu": [
                "↲(Φ(IconButton, {_icon: 'menu', _iconColor: ℛ(color, 'white')}))"
            ],
            "mainBody": [
                "_key, _pageController, _pageNoti, _totalPages | (_p1 ≔ Φ(Container, {_child: page1, _color: ℛ(color, 'lightGreyText')})) ⋀ ",
                "(_p2 ≔ Φ(Container, {_color: ℛ(color, 'correct')})) ⋀ (_p3 ≔ Φ(Container, {_color: ℛ(color, 'incorrect')})) ⋀ ",
                "(_children ≔ [_p1, _p2, _p3]) ⋀ (_totalPages ≔ #(_children)) ⋀ ↲(Φ(PageView))"
            ],
            "page1": [
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_s ≔ Φ(SizedBox, {_width: ℛ(wratio, Ø, 0.05)})) ⋀ ",
                "(_tText ≔ Φ(Text, {_text: ⊤('contact'), _textStyle: ℛ(textStyle, Title)})) ⋀ ",
                "⋓({_iconColor: 'grey700', _icon: 'plus'}) ⋀ (_ic1 ≔ Φ(IconButton)) ⋀ ",
                "(_icon ≔ 'search') ⋀ (_ic2 ≔ Φ(IconButton)) ⋀ (_icon ≔ 'filter') ⋀ (_ic3 ≔ Φ(IconButton)) ⋀ ",
                "(_children ≔ [_ic1, _ic2, _ic3]) ⋀ (_r ≔ Φ(Row)) ⋀ (_children ≔ [_tText, _r]) ⋀ ",
                "(_sb ≔ Φ(Container, {_width: ℛ(wratio, Ø, 0.95), _child: Φ(Row)})) ⋀ (_itemRefMap ≔ ℛ(model, main)) ⋀ (_itemRef ≔ _itemRefMap[elemList]) ⋀ ",
                "↲(Φ(Column, {_children: [_sb, baseNavi]}))"
            ],
            "baseNavi": [
                "_itemRefMap | ⋓({_childPattern: 'elemRow', _childMap: {_itemRefMap: _itemRefMap}, _dataCache: {_dataList: _itemRefMap[elemList], _plen: 5}}) ⋀ ",
                "⋓({_child: Φ(Paging), _alignment: decode(alignment, topCenter), ",
                "_width: ℛ(swratio, Ø, 1.0), _height: ℛ(hratio, Ø, 0.72)}) ⋀ ↲(Φ(Container))"
            ],
            "elemRow": [
                "_item, _index, _itemRefMap | (_header ≔ _itemRefMap[header]) ⋀ (_dec ≔ ℛ(textStyle, Normal16)) ⋀ ",
                "mapPat(_header, _item) ⋀ ⋓({_c: Φ(Text, {_text: _company, _textStyle: ℛ(textStyle, Title)}), ",
                "_n: Φ(Text, {_text: _name, _textStyle: _dec}), _a1: Φ(Text, {_text: _address[0], _textStyle: _dec}), ",
                "_a2: Φ(Text, {_text: _address[1], _textStyle: _dec}), ",
                "_height: ℛ(hratio, Ø, 0.0468), _d: Φ(Divider, {_thickness: 1.5}), _data: _tel, _pat: 'telTile'}) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_addr ≔ (_address[0] + ⊤(comma) + ' ' + _address[1])) ⋀ ",
                "(_icc ≔ Φ(IconButton, {_onTap: createEvent(['fsmEvent', {_event: 'timer', _company: _company}]), _tapAction: 'timerfsm', _iconColor: 'btnBlue', _icon: 'schedule'})) ⋀ ",
                "(_children ≔ [_c, _icc]) ⋀ (_child ≔ Φ(Row)) ⋀ (_cc ≔ Φ(SizedBox)) ⋀ ",
                "(_ic ≔ Φ(IconButton, {_onTap: createEvent(addrToMap), _tapAction: _addr, _iconColor: 'position', _icon: 'map'})) ⋀ ",
                "(_children ≔ [_a1, _ic]) ⋀ (_child ≔ Φ(Row)) ⋀ (_ac ≔ Φ(SizedBox)) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_children ≔ [_cc, _n, _d, _ac, _a2, _d]) ⋀ (_children ⊌ itItems) ⋀  ⋓({_child: Φ(Padding, {_child: Φ(Column), _padding: ℛ(appRes, boxPadding)}), ",
                "_elevation: ℛ(hratio, Ø, 0.01), _cardRadius: ℛ(hratio, Ø, 0.015)}) ⋀ (_h ≔ ((#(_children) - 7) * _height)) ⋀ ",
                "⋓({_child: Φ(Card), _width: ℛ(swratio, Ø, 0.95), _height: (ℛ(hratio, Ø, 0.35) + _h)}) ⋀ ↲(Φ(Container))"
            ],
            "itItems": "_data, _pat, _dec, _height | (_children ≔ []) ⋀ ((_item ∈ _data) ⋀ (_c  ≔ _pat) ⋀ (_children ≪ _c)) ⋀ ↲(_children)",
            "textTile": "_item, _dec | ↲(Φ(Text, {_text: _item, _textStyle: _dec}))",
            "telTile": [
                "_item, _dec, _height | (_tText ≔ ('Tel' + ⊤(colon) + ' ' + _item)) ⋀ (_t ≔ Φ(Text, {_text: _tText, _textStyle: _dec})) ⋀ ",
                "(_ic ≔ Φ(IconButton, {_onTap: createEvent(toTel), _tapAction: _item, _iconColor: 'red', _icon: 'phone'})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_children ≔ [_t, _ic]) ⋀ (_child ≔ Φ(Row)) ⋀ ↲(Φ(SizedBox))"
            ],
            "timerDialog": [
                "_company | (_event ≔ 'timer') ⋀ (timerUpdateStart) ⋀ (_compState ≔ ℛ(getCache, ('timer' + _company))) ⋀ (_value ≔ _compState['_value']) ⋀ ",
                "(_state ≔ _compState['_state']) ⋀ (timerState) ⋀ ⋓({_children: timerItems, _icon: 'save', _iconColor: 'btnBlue', ",
                "_onTap: createEvent(stopTimer), _tapAction: {_company: _company, _name: 'timerAbort'}}) ⋀ ",
                "(_text ≔ ⊤(_icon + 'Timer')) ⋀ ⋓({_child: Φ(Padding, {_child: Φ(Column), _padding: ℛ(appRes, boxPadding)}), ",
                "_elevation: ℛ(hratio, Ø, 0.01), _cardRadius: ℛ(hratio, Ø, 0.015), ",
                "_icSet: tapIconElem, _icon: 'cancel', _iconColor: 'red', _text: ⊤('abortTimer')}) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_icSet, tapIconElem]) ⋀ ",
                "⋓({_children: ([_ac, Φ(Card), Φ(SizedBox, {_height: ℛ(size10)}), Φ(Row)]), _width: ℛ(swratio, Ø, 0.85), _height: ℛ(hratio, Ø, 0.82)}) ⋀ ",
                "mapPat(rowColHeader, (start, start, max, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ↲(Φ(Container))"
            ],
            "timerState": [
                "_state, _company | (((_state = 'new') ⋁ (_state = 'edited')) ⋀ ℛ(setResxValue, 'startButton', 1.0) ⋀ ↲(ℛ(setResxValue, 'stopButton', 0.5))) ⋁ ",
                "((_state = 'stopped') ⋀ ℛ(setResxValue, 'stopButton', 0.5) ⋀ ↲(ℛ(setResxValue, 'startButton', 0.5))) ⋁ ",
                "↲(startTimer({_company: _company, _startName: 'timerStart', _duration: 20, _name: 'timerGo', _state: _state}))"
            ],
            "timerItems": [
                "_company, _ac, _value | ⋓({_textStyle: ℛ(textStyle, ChoiceButn), _rxName: 'startButton', _se: 'Start'}) ⋀ ",
                "⋓({_c: Φ(Text, {_text: _company, _textStyle: ℛ(textStyle, Title)}), _d: Φ(Text, {_text: ⊤('service'), _textStyle: _textStyle}), ",
                "_dp: Φ(DropdownButton, {_items: services, _hint: ⊤('select one'), _cacheName: (_company + 'Service'), ",
                "_textStyle: _textStyle, _value: _value, _fsmName: 'timerService', _inMap: {_company: _company}}), _di: Φ(Divider, {_thickness: 1.5}), ",
                "_ic: Φ(IconButton, {_onTap: createEvent(stopTimer), _tapAction: {_company: _company, _name: 'timerExit'}, _iconColor: 'grey700', _icon: 'cancel', _iconSize: 16.0})}) ⋀ ",
                "(_dpr ≔ Φ(SizedBox, {_child: Φ(Row, {_children: [_d, _dp], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "(_ac ≔ Φ(Row, {_children: [_ic], _mainAxisAlignment: decode(mainAxisAlignment, end)})) ⋀ (_children ≔ ([_c, _di, _dpr] ⊌ timerRows)) ⋀ ",
                "(_se ≔ 'End') ⋀ (_rxName ≔ 'stopButton') ⋀ (_children ⊌ timerRows) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_inv ≔ Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: (_company + 'Intv')})) ⋀ (_children ⊌ [_di, _inv])",
                "↲(_children)"
            ],
            "timerRows": [
                "_company, _se, _textStyle, _di, _rxName, _state | (((_se = 'Start') ⋀ ",
                "(_ih ≔ Φ(IconButton, {_onTap: createEvent(startTimer), _tapAction: {_company: _company, _startName: 'timerStart', _duration: 2, _name: 'timerGo', _rxName: _rxName, _state: _state}, _iconColor: 'red', _icon: 'start'}))) ⋁ ",
                "(_ih ≔ Φ(IconButton, {_onTap: createEvent(stopTimer), _tapAction: {_company: _company, _name: 'timerStop', _rxName: _rxName}, _iconColor: 'red', _icon: 'stop'}))) ⋀ ",
                "⋓({_h: Φ(Text, {_text: ⊤(_se), _textStyle: _textStyle}), _height: ℛ(hratio, Ø, 0.05), ",
                "_d: Φ(Text, {_text: ⊤('date'), _textStyle: _textStyle}), _t: Φ(Text, {_text: ⊤('time'), _textStyle: _textStyle}), ",
                "_id: Φ(IconButton, {_onTap: createEvent(pickDate), _tapAction: {_event: ('date' + _se), _company: _company, _name: ('timerUpdate' + _se)}, _iconColor: 'btnBlue', _icon: 'calendar'}), ",
                "_it: Φ(IconButton, {_onTap: createEvent(pickTime), _tapAction: {_event: ('time' + _se), _company: _company, _name: ('timerUpdate' + _se)}, _iconColor: 'btnBlue', _icon: 'pickTime'})}) ⋀ ",
                "(_dt ≔ Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: ('date' + _se + _company)})) ⋀ ",
                "(_tt ≔ Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: ('time' + _se + _company)})) ⋀ ",
                "(_dr ≔ Φ(Row, {_children: [_d, _dt]})) ⋀ (_tr ≔ Φ(Row, {_children: [_t, _tt]})) ⋀ ",
                "(_rd ≔ Φ(SizedBox, {_height: _height, _child: Φ(Row, {_children: [_dr, _id], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "(_rt ≔ Φ(SizedBox, {_height: _height, _child: Φ(Row, {_children: [_tr, _it], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "(_rh ≔ Φ(SizedBox, {_height: _height, _child: Φ(Row, {_children: [_h, Φ(ObxOpacity, {_child: _ih, _rxName: _rxName})], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "↲([_di, _rh, _rd, _rt])"
            ],
            "timerSetting": "_company, _dateTime, _event | ↲(setTimer({_inTimer: _dateTime, _company: _company, _event: _event}))",
            "timerUpdateStart": [
                "_company, _dateTime, _event | (timerSetting) ⋀ (_inv ≔ getTimeInterval([_company, 'dhmstr'])) ⋀ ",
                "↲(ℛ(setResxValue, (_company + 'Intv'), (⊤('interval') + _inv)))"
            ],
            "timerUpdateEnd": [
                "_company, _dateTime, _event | ℛ(setResxValue, stopButton, 0.5) ⋀ (timerUpdateStart) ⋀ ↲(stopTimer())"
            ],
            "timerStart": [
                "_company, _state | ℛ(setResxValue, startButton, 0.5) ⋀ ℛ(setResxValue, stopButton, 1.0) ⋀ ((_state = 'started') ⋀ ",
                "↲(setTimer({_company: _company, _event: 'timing'}))) ⋁ ↲(setTimer({_company: _company, _event: 'start'}))"
            ],
            "timerStop": "_company | ℛ(setResxValue, stopButton, 0.5) ⋀ ↲(setTimer({_company: _company, _event: 'stop'}))",
            "timerGo": "_company | (_event ≔ 'timing') ⋀ ↲(timerUpdateStart)",
            "timerExit": "↲(popRoute())",
            "timerService": "_value, _company | (_mtimer ≔ ℛ(getCache, ('timer' + _company))) ⋀ ↲(_mtimer ⊌ {_value: _value})",
            "timerAbort": "_company | ℛ(removeCache, ('timer' + _company)) ⋀ ↲(popRoute())",
            "timerfsm": [
                "_event, _company | (_event = 'timer') ⋀ ↲(buildDialog('timerDialog', {_company: _company}))"
            ],
            "tapIconElem": [
                "_icon, _text, _iconColor, _onTap, _tapAction | ⋓({_borderColor: ℛ(color, 'grey'), _borderWidth: 2.0, _width: ℛ(swratio, Ø, 0.25), _noShadow: true, ",
                "_textAlign: decode(textAlign, center), _iconSize: 30.0}) ⋀ ",
                "⋓({_child: Φ(Text), _i: Φ(Icon)}) ⋀ ",
                "(_child ≔ Φ(Column, {_children: [_i, Φ(Container)], _mainAxisAlignment: decode(mainAxisAlignment, spaceEvenly)})) ⋀ ",
                "(_height ≔ (_width * 0.85)) ⋀ ↲(Φ(TapItem, {_child: Φ(ColorButton), _onTap: _onTap, _tapAction: _tapAction}))"
            ],
            "pageAppBar": [
                "_flexibleSpace, _title, _leading | (_child ≔ Φ(Text, {_text: _title, _textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)}))⋀ ↲(Φ(Expanded))"
            ],
            "testBox": "(_text ≔ ⊤(testText)) ⋀ (_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
        }
    },
    "stateData": {}
}