{
    "title": "Xemino",
    "version": "0.00",
    "main": "contact",
    "text": {
        "abortTimer": "Zeitmessung abbrechen",
        "brac": "(",
        "cat61": "6-1",
        "cat71": "7-1",
        "colon": ":",
        "comma": ",",
        "contact": "Kontakte",
        "customer": "Kunden",
        "date": "Datum:  ",
        "dayAgo": " (vor #n# Tagen)",
        "dash": "-",
        "email": "demo-user@sevconcept.ch",
        "End": "Ende",
        "hash": "#",
        "hourAgo": " (vor #n# Stunden)",
        "interval": "Intervall:  ",
        "ket": ")",
        "minAgo": " (vor #n# Minuten)",
        "notice": "Notizen",
        "password": "Passwort",
        "plz": "Plz",
        "requiredField": "Das Feld ist obligatorisch!",
        "saveTimer": "Zeitmessung speichen",
        "search": "Search",
        "select one": "Wähle eins",
        "semicolon": ";",
        "service": "Dienstleistung:",
        "star": "*",
        "Start": "Start",
        "startTimer": "Zeitmessung starten",
        "stopTimer": "Zeitmessung stoppen",
        "submit": "Speichen",
        "tag": "Tag",
        "testText": "There is nothing yet!!!",
        "time": "Zeit:  ",
        "timer": "Zeitmessung",
        "title": "Titel",
        "xemino": "assets/images/xeminologo.png"
    },
    "config": {
        "contact": {
            "header": "company;name;address;tel",
            "elemList": [
                "Seveco AG;Yeung Pang;[Untermüli 6,5630 Zug];[+41 56 667 47 90,+41 76 399 2019]",
                "Pangaroo GmbH;Benjamin Pang;[Adam-Friedrich-Molz-Gasse 8,2502 Biel];+41 76 379 2849",
                "Seveco Software AG;Werner Hofer;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 478 9321",
                "Seveco Software AG;Reto Leutwyler;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 444 2370",
                "Seveco AG;Yeung Pang;[Untermüli 6,5630 Zug];[+41 56 667 47 90,+41 76 399 2019]",
                "Pangaroo GmbH;Benjamin Pang;[Adam-Friedrich-Molz-Gasse 8,2502 Biel];+41 76 379 2849",
                "Seveco Software AG;Werner Hofer;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 478 9321",
                "Seveco Software AG;Reto Leutwyler;[Mettlenbachstrasse 29,8617 Mönchaltorf];+41 79 444 2370"
            ]
        }
    },
    "blueprint": {
        "facts": {
            "services": [
                "Reinigung",
                "Montage"
            ]
        },
        "clauses": {
            "mainContent": "(_editable ≔ true) ⋀ (_map ≔ mainMap) ⋀ ↲(mainDrawer)",
            "mainMap": "↲([drawerListMap('customer'), drawerListMap('contact')])",
            "contactDetail": [
                "_item, _barTitle | τ('contactDetail') ⋀ (_barTitle ≔ _item['title']) ⋀ cardConst ⋀ (_chi ≔ [Φ(Text, {_text: _item['title'], _textStyle: ℛ(textStyle, Bold20)})]) ⋀ ",
                "(_tName ≔ 'cf_email') ⋀ addItem ⋀ (∄(_item['cf_telefon']) ⋁ ",
                "((_tel ≔ _item['cf_telefon']) ⋀ (_pref ≔ 'Tel') ⋀ (_chi ≪ telTile))) ⋀ (∄(_item['cf_mobile']) ⋁ ",
                "((_tel ≔ _item['cf_mobile']) ⋀ (_pref ≔ 'Mobile') ⋀ (_chi ≪ telTile))) ⋀ (_tName ≔ 'cf_position__rolle') ⋀ addItem ⋀ ",
                "(_chi ⊌ [_div, Φ(Text, {_text: _item['entryDate'], _textStyle: _dec})]) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_children ≔ _chi) ⋀ ⋓({_child: Φ(Padding, {_child: Φ(Column), _padding: ℛ(appRes, boxPadding)}), ",
                "_elevation: ℛ(hratio, Ø, 0.01), _cardRadius: ℛ(hratio, Ø, 0.015)}) ⋀ ↲(Φ(SizedBox, {_child: Φ(Card), _width: ℛ(swratio, Ø, 0.95)}))"
            ]
        },
        "objects": {
            "customer": {
                "title": "Title;key;required",
                "_chAdr": "Addresse",
                "cf_telefon": "Telefon;phone;;phone;red;toTel;_;Tel: ",
                "cf_mobile": "Mobile;phone;;phone;red;toTel;_;Mobile: ",
                "cf_homepage": "Home Page;url;;website;btnBlue;toUrl;_",
                "cf_email": "Email;email;",
                "cf_zusatz": "Zusatz",
                "entryDate": "Entry day;;system;edit;btnBlue;route;formAction",
                "icon": "customer",
                "pageId": 6,
                "columnId": 1,
                "titleName": "Kunden",
                "titleField": "title",
                "subviewId": 7,
                "subviewCols": [
                    1,
                    2,
                    -1
                ],
                "subviewObj": [
                    "contact",
                    "notice",
                    "timer"
                ],
                "subviewTabs": [
                    "Kontakte",
                    "Notizen",
                    "Zeitmessung"
                ],
                "fields": [
                    "title",
                    "_chAdr",
                    "cf_telefon",
                    "cf_mobile",
                    "cf_homepage",
                    "cf_email",
                    "cf_zusatz",
                    "entryDate"
                ],
                "valueName": "contactPage",
                "formAction": "_item | ↲({_tapAction: 'formScaffold', _map: {_object: 'customer', _formData: _item, _fsm: 'saveObjfsm'}})",
                "map": "↲(objMap({_obj: customer}))",
                "subviews": "↲(['contact.row', 'notice.row', 'timer.row'])",
                "detail": "_item, _barTitle | (_barTitle ≔ _item['title']) ⋀ (_obj  ≔ customer) ⋀ ↲(tabSubView)",
                "topCard": [
                    "_item | cardConst ⋀ ⋓({_object: 'customer', _textStyle: _dec, _rinfo: {}, _split: true, ",
                    "_attrList: [{_attr: 'cf_zusatz', _textStyle: ℛ(textStyle, 'Bold20')}, 'div', 'cf_adresse', ",
                    "{_text: chAdr.getAddrLine2}, 'div', 'cf_telefon', 'div', 'cf_homepage', ",
                    "'cf_email', 'div', 'entryDate']}) ⋀ (_child ≔ Φ(TextIconList)) ⋀ ↲(card)"
                ]
            },
            "chAdr": {
                "cf_adresse": "Strasse;;;map;position;addrToMap;onTap",
                "cf_plz": "Plz",
                "cf_ort": "Ort",
                "cf_land": "Land",
                "fields": [
                    "cf_adresse",
                    "cf_plz",
                    "cf_ort",
                    "cf_land"
                ],
                "getAddrLine2": "_item | ↲(_item['cf_land'] + ⊤(dash) + + _item['cf_plz'] + ' ' + _item['cf_ort'] + ' ' + ⊤(brac) + _item['cf_region'] + ⊤(ket))",
                "onTap": "_item | ↲({_tapAction: (_item['cf_adresse'] + ⊤(comma) + ' ' + _item['cf_plz'] + ' ' + _item['cf_ort'])})"
            },
            "contact": {
                "title": "Title;key;required",
                "cf_vorname": "Vor Name",
                "cf_telefon": "Telefon;phone;;phone;red;toTel;_;Tel: ",
                "cf_mobile": "Mobile;phone;;phone;red;toTel;_;Mobile: ",
                "cf_email": "Email;email",
                "cf_position__rolle": "Rolle",
                "_action": "Aktionen;ref",
                "entryDate": "Entry day;;system;edit;btnBlue;route;formAction",
                "icon": "contact",
                "pageId": 22,
                "columnId": 1,
                "fields": [
                    "title",
                    "cf_vorname",
                    "cf_telefon",
                    "cf_mobile",
                    "cf_email",
                    "cf_position__rolle",
                    "entryDate"
                ],
                "titleField": "title",
                "titleName": "Kontakte",
                "formAction": "_item | ↲({_tapAction: 'formScaffold', _map: {_object: 'contact', _index: 0, _formData: _item, _fsm: 'saveObjfsm'}})",
                "map": "↲(objMap({_obj: contact}))",
                "row": [
                    "_item | cardConst ⋀ ⋓({_object: 'contact', _textStyle: _dec, _rinfo: {}, _split: true, ",
                    "_attrList: [{_attr: 'title', _textStyle: ℛ(textStyle, 'Bold20')}, 'cf_email', ",
                    "'div', 'cf_telefon', 'cf_mobile', 'div', 'cf_position__rolle', 'div', 'entryDate']}) ⋀ (_child ≔ Φ(TextIconList)) ⋀ ",
                    "↲(card)"
                ],
                "detail": [
                    "_item, _barTitle | τ('contactDetail') ⋀ (_barTitle ≔ _item['title']) ⋀ ↲(Φ(Column, {_children: [row]}))"
                ]
            },
            "action": {
                "cf_aktionen": "Aktion"
            },
            "notice": {
                "title": "Title;key;required",
                "cf_notiz": "Notiz",
                "cf_kontakt": "Kontakt",
                "entryDate": "Entry day;;system;edit;btnBlue;route;formAction",
                "fields": [
                    "title",
                    "cf_notiz",
                    "cf_kontakt",
                    "entryDate"
                ],
                "formAction": "_item | ↲({_tapAction: 'formScaffold', _map: {_object: 'notice', _formData: _item, _fsm: 'saveObjfsm'}})",
                "getContact": [
                    "_item | (∄(_item['cf_kontakt']) ⋀ ↲(Ø)) ⋁ ((_data ≔ getRelation({ref: _item['cf_kontakt'], relId: _item['id']})) ⋀ ",
                    "⋀ (_pat ≔ 'textButtonTile') ⋀ ↲(Φ(Wrap, {_children: itItems, _alignment: decode(wrapAlignment, spaceBetween)})))"
                ],
                "row": [
                    "_item | cardConst ⋀ ⋓({_object: 'notice', _textStyle: _dec, _rinfo: {}, _split: true, ",
                    "_attrList: [{_attr: 'title', _textStyle: ℛ(textStyle, 'Bold20')}, {_pat: 'notice.getContact'}, 'cf_notiz', ",
                    "'div', 'entryDate']}) ⋀ (_child ≔ Φ(TextIconList)) ⋀ ↲(card)"
                ]
            },
            "timer": {
                "getTop": [
                    "_item | _children ≔ [Φ(DropdownButton, {_items: ['Reinigung', 'Montage'], _hint: ⊤('select one'), _cacheName: (_item + 'Cache'), ",
                    "_textStyle: _textStyle, _value: _value, _fsmName: 'timerService', _inMap: {_company: _item}}), ",
                    "Φ(CupertinoSwitch)] ⋀ (_alignment ≔ 'spaceBetween') ⋀ ↲(padRow)"
                ],
                "getTracker": [
                    "_item | "
                ],
                "row": [
                    "_item | cardConst ⋀ ⋓({_object: 'timmer', _textStyle: _dec, _rinfo: {}, _split: true, ",
                    "_attrList: [{_pat: 'timer.getTop'}, 'div', {_pat: 'timer.getTracker'}, ",
                    "{_pat: 'timer.getBottom'}]}) ⋀ (_child ≔ Φ(TextIconList)) ⋀ ↲(card)"
                ]
            }
        }
    },
    "patterns": {
        "facts": {
            "objStack": [],
            "first": true,
            "header": "label;type;entry;icon;iconColor;func;tap;prefix;",
            "attrHeader": [
                "label",
                "type",
                "entry"
            ],
            "patHeader": [
                "hratio",
                "wratio",
                "color",
                "radius",
                "alignment",
                "size"
            ],
            "rowColHeader": [
                "crossAxisAlignment",
                "mainAxisAlignment",
                "mainAxisSize",
                "verticalDirection"
            ]
        },
        "clauses": {
            "mainView": "setBlueprint() ⋀ ↲(mainContent)",
            "mainDrawer": [
                "_editable, _map | ⋓({_text: ℛ(model, title), _key: key(), _width: ℛ(swratio, Ø, 0.25), _iconColor: ℛ(color, 'white')}) ⋀ ",
                "⋓({_height: _width, _iconSize: (_width * 0.8)}) ⋀ (_color ≔ _iconColor) ⋀ (_child ≔ Φ(ImageAsset, {_name: ⊤(xemino)})) ⋀ ",
                "(_ic1 ≔ Φ(Container)) ⋀ (_children ≔ [_ic1]) ⋀ (_n ≔ {_i: 0}) ⋀ ((_elem ∈ _map) ⋀ ⋓(_elem) ⋀ (_child ≔ Φ(IconButton)) ⋀ ",
                "(_children ≪ Φ(SizedBox)) ⋀ (((_n['_i'] = 0) ⋀ (_n['_i'] ≔ 1) ⋀ (_body ≔ _mapBody(_map)) ⋀ (((_editable) ⋀ ",
                "(_floatingAction ≔ Φ(FloatingAction, {_icon: 'add', _iconColor: 'white', _iconSize: 40.0, ",
                "_onTap: {_func: 'route', _tapAction: 'formScaffold', _map: {_object: ç(_object), _formData: {}, _fsm: 'saveMainfsm'}}}))) ⋁ ",
                "(true)))) ⋁ (true)) ⋀ mapPat(rowColHeader, (center, start, max, Ø)) ⋀ ",
                "(_drawer ≔ Φ(Drawer, {_child: Φ(Column), _width: _width})) ⋀ ⋓({_title: mainAppBar}) ⋀ ↲(scaffoldPat)"
            ],
            "drawerListMap": [
                "_obj | ↲({_object: ç(_obj), _icon: _obj['icon'], _mapBody: 'listBody', _map: {_listItemDetail: (_obj['map'])}, ",
                "_onTap: {_func: 'fsmEvent', _tapAction: 'drawerfsm', _map: {_listItemDetail: (_obj['map'])}}})"
            ],
            "objMap": [
                "_obj | ↲({_pageId: _obj['pageId'], _titleName: _obj['titleName'], _childPattern: 'listTextCard', _subviewObj: _obj['subviewObj'], ",
                "_childMap: {_tName: _obj['titleField'], _fName: 'listData'}, _columnId: _obj['columnId'], _groupName: 'mainListPage', _pageBody: _obj['detail']})"
            ],
            "drawerItem": [
                "_name, _map, _height, _iconSize, _iconColor | (_icon ≔ _name) ⋀ ((_name = 'logo') ⋀ (_child ≔ Φ(Icon)) ⋀ ↲(Φ(Container))) ⋁ ",
                "((_onTap ≔ {_func: 'fsmEvent', _tapAction: 'drawerfsm', _map: _map}) ⋀ (_child ≔ Φ(IconButton)) ⋀ ↲(Φ(SizedBox)))"
            ],
            "mainBottomBar": [
                "_pageController, _pageNoti, _totalPages | ⋓({_inxIcon: Φ(Icon, {_icon: 'complete', _iconColor: 'btnBlue', ",
                " _iconSize: 17.0}), _nonInxIcon: Φ(Icon, {_icon: 'incomplete', _iconColor: 'btnBlue', ",
                " _iconSize: 17.0})}) ⋀ ↲(Φ(PageBar))"
            ],
            "scaffoldPat": [
                "_title, _child, _body, _key, _flexibleSpace, _leading, _bottomBar, _drawer, _floatingAction | ",
                "mapPat(patHeader, (0.055, Ø, #FFFFFF, Ø, Ø, Ø)) ⋀ (_toolbarHeight ≔ ℛ(appBarHeight)) ⋀ ",
                "(∄(_drawer) ⋀ ↲(Φ(Scaffold, {_bottomNavigationBar: _bottomBar, _appBar: Φ(AppBar), _body: _body, _floatingAction: _floatingAction}))) ⋁ ",
                "↲(Φ(Scaffold, {_bottomNavigationBar: _bottomBar, _appBar: Φ(AppBar), _body: _body, _drawer: _drawer, _floatingAction: _floatingAction}))"
            ],
            "mainAppBar": [
                "_text, _flexibleSpace | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, Topic)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_iconColor ≔ ℛ(color, 'white')) ⋀ ",
                "(_icon ≔ 'chat') ⋀ (_ic2 ≔ Φ(IconButton)) ⋀ (_icon ≔ 'settings') ⋀ (_ic3 ≔ Φ(IconButton)) ⋀ ",
                "(_icon ≔ 'search') ⋀ (_onTap ≔ {_func: 'search', _map: {_searchTypes: 'customer;contact;plz;tag'}}) ⋀ (_ic1 ≔ Φ(IconButton)) ⋀ ",
                "(_ic ≔ Φ(Row, {_children: [_ic1, _ic2, _ic3], _mainAxisAlignment: decode(mainAxisAlignment, spaceEvenly)})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "hamburgerMenu": [
                "↲(Φ(IconButton, {_icon: 'menu', _iconColor: ℛ(color, 'white')}))"
            ],
            "listBody": "_pageId, _titleName, _listItemDetail | listPagefsm ⋀ ↲(listPageF)",
            "mainContainer": "_child, _alignment | ↲(Φ(Container, {_width: ℛ(swratio, Ø, 1.0), _height: ℛ(hratio, Ø, 0.8), _child: _child}))",
            "listPageF": [
                "_value | mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ ",
                "(_tText ≔ Φ(Text, {_textStyle: ℛ(textStyle, Title)})) ⋀ (_oText ≔ (Φ(Obx, {_child: _tText, _valueName: 'titleName', _valueKey: '_text'}))) ⋀ ",
                "(_tc ≔ ℛ(textController)) ⋀ (_fMap ≔ {_groupName: 'mainListPage', _textController: _tc}) ⋀ (_fEvent ≔ {_func: 'filter', _tapAction: _fMap, _map: _fMap}) ⋀ ",
                "⋓({_iconColor: 'grey700', _icon: 'plus', _iconSize: 20.0, _sd: Φ(SizedBox, {_width: ℛ(wratio, Ø, 0.03)})}) ⋀ (_ic1 ≔ Φ(IconText)) ⋀ ",
                "(_ic3 ≔ Φ(IconText, {_icon: 'filter', _iconSize: _iconSize,  _onTap: _fEvent})) ⋀ ",
                "(_ic4 ≔ Φ(IconText, {_icon: 'sortDown', _iconSize: _iconSize,  _onTap: {_func: 'sort',  _tapAction: {_groupName: 'mainListPage'}}})) ⋀ ",
                "(_ic5 ≔ Φ(IconText, {_icon: 'sortUp', _iconSize: _iconSize, _onTap: {_func: 'sort',  _tapAction: {_groupName: 'mainListPage', _ascending: false}}})) ⋀ ",
                "(_ic6 ≔ Φ(IconText, {_icon: 'cached', _iconSize: _iconSize,  _onTap: {_func: 'refresh',  _tapAction: {_groupName: 'mainListPage'}}})) ⋀ ",
                "(_children ≔ [_sd, _ic3, _sd, _ic4, _sd, _ic5, _sd, _ic6]) ⋀ (_r ≔ Φ(Row)) ⋀ ",
                "(_ft ≔ Φ(Container, {_child: Φ(InTextField, {_textController: _tc, _autofocus: first, _complete: _fEvent, _focusNode: ℛ('focusNode'), _clear: true}), _width: ℛ(wratio, Ø, 0.4), ",
                "_height: ℛ(hratio, Ø, 0.05)})) ⋀ (_children ≔ [_oText, _ft,  _r]) ⋀ (_sb ≔ Φ(Container, {_width: ℛ(wratio, Ø, 0.95), _child: Φ(Row)})) ⋀ ",
                "_mainListPage ≔ Φ(Obx, {_child: Φ(Container), _valueName: 'mainListPage'}) ⋀ setFact('first', false) ⋀ ↲(Φ(Column, {_children: [_sb, _mainListPage]}))"
            ],
            "listPage": [
                "_value | (_listItemDetail ≔ getCache('mainListPageCache')) ⋀ ⋓(_listItemDetail) ⋀ ⋓({_dataCache: {_dataList: _value, _plen: 30, _nrlen: 2, _prlen: 2}}) ⋀ ",
                "⋓({_child: Φ(Paging), _alignment: decode(alignment, topCenter)}) ⋀ ↲(mainContainer)"
            ],
            "genAppBar": [
                "_flexibleSpace, _text, _leading | (_child ≔ Φ(Text, {_text: _text, _textStyle: ℛ(textStyle, TopicTxtStyle)})) ⋀ ",
                "(_child ≔ Φ(Center)) ⋀ (_tText ≔ Φ(Expanded)) ⋀ (_ic ≔ hamburgerMenu) ⋀ ",
                "(_leading ≔ Φ(IconButton, {_icon: 'back', _iconColor: ℛ(color, 'white'), _onTap: {_func: popRoute}})) ⋀ ",
                "(_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ (_children ≔ [_tText, _ic]) ⋀ ↲(Φ(Row))"
            ],
            "listTextCard": [
                "_item, _index, _tName, _fName | ⋓({_child: Φ(Text, {_text: _item[_tName], _textStyle: ℛ(textStyle, Normal16)}), _padding: ℛ(appRes, aboxPadding)}) ⋀ ",
                "(_child ≔ Φ(Padding)) ⋀ ↲(Φ(TapItem, {_child: Φ(Card), _onTap: {_func: 'fsmEvent', _tapAction: (_fName + 'fsm'), _map: {_event: 'selected', _value: _item}}}))"
            ],
            "itItems": "_data, _pat, _dec, _height | (_children ≔ []) ⋀ ((∀(_item) ∈ _data) ⋀ (_c ≔ _pat) ⋀ (_children ≪ _c)) ⋀ ↲(_children)",
            "addItem": "_item, _dec, _tName, _chi | (∄(_item[_tName]) ⋀ ↲(true)) ⋁ ↲(_chi ≪ (Φ(Text, {_text: _item[_tName], _textStyle: _dec})))",
            "addPat": "_item, _dec, _tName, _pat, _chi | (∄(_item[_tName]) ⋀ ↲(true)) ⋁ ↲(_pat)",
            "textTile": "_item, _dec | ↲(Φ(Text, {_text: _item, _textStyle: _dec}))",
            "telRow": [
                "_tel, _pref, _dec, _height | (_tText ≔ (_pref + ⊤(colon) + ' ' + _tel)) ⋀ ",
                "(_child ≔ Φ(TextIconRow, {_text: _tText, _textStyle: _dec, _fitted: true, _onTap: {_func: toTel, _tapAction: _tel}, _iconColor: 'red', _icon: 'phone'})) ⋀ ",
                "↲(Φ(SizedBox))"
            ],
            "telTile": [
                "_tel, _pref, _dec, _height | (_tText ≔ (_pref + ⊤(colon) + ' ' + _tel)) ⋀ (_t ≔ Φ(Text, {_text: _tText, _textStyle: _dec})) ⋀ ",
                "(_ic ≔ Φ(IconButton, {_onTap: {_func: toTel, _tapAction: _tel}, _iconColor: 'red', _icon: 'phone'})) ⋀ ",
                "mapPat(rowColHeader, (center, spaceBetween, max, Ø)) ⋀ (_children ≔ [_t, _ic]) ⋀ (_child ≔ Φ(Row)) ⋀ ↲(Φ(SizedBox))"
            ],
            "textButtonTile": [
                "_item, _dec | ⋓({_color: ℛ(color, 'greyText'), _width: (#(_item) * ℛ(sizeScale, Ø, 8.0)), ",
                "_noShadow: true, _height: ℛ(size20), _textAlign: decode(textAlign, center)}) ⋀ ",
                "_child ≔ Φ(Text, {_text: _item, _textStyle: ℛ(textStyle, faintTxtStyle)}) ⋀ ↲(Φ(ColorButton))"
            ],
            "timerCard": [
                "_company | (_event ≔ 'timer') ⋀ (timerUpdateStart) ⋀ (_compState ≔ ℛ(getCache, ('timer' + _company))) ⋀ (_value ≔ _compState['_value']) ⋀ ",
                "(_state ≔ _compState['_state']) ⋀ (timerState) ⋀ ⋓({_children: timerItems, _icon: 'save', _iconColor: 'btnBlue', ",
                "_onTap: {_func: stopTimer, _tapAction: {_company: _company, _name: 'timerAbort'}}}) ⋀ ",
                "(_text ≔ ⊤(_icon + 'Timer')) ⋀ ⋓({_child: Φ(Padding, {_child: Φ(Column), _padding: ℛ(appRes, boxPadding)}), ",
                "_elevation: ℛ(hratio, Ø, 0.01), _cardRadius: ℛ(hratio, Ø, 0.015), ",
                "_icSet: tapIconElem, _icon: 'cancel', _iconColor: 'red', _text: ⊤('abortTimer')}) ⋀ ",
                "mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ (_children ≔ [_icSet, tapIconElem]) ⋀ ",
                "⋓({_children: ([_ac, Φ(Card), Φ(SizedBox, {_height: ℛ(size10)}), Φ(Row)]), _width: ℛ(swratio, Ø, 0.85), _height: ℛ(hratio, Ø, 0.82)}) ⋀ ",
                "mapPat(rowColHeader, (start, start, max, Ø)) ⋀ (_child ≔ Φ(Column)) ⋀ ↲(Φ(Container))"
            ],
            "timerState": [
                "_state, _company | (((_state = 'new') ⋁ (_state = 'edited')) ⋀ ℛ(setResxValue, 'startButton', 1.0) ⋀ ↲(ℛ(setResxValue, 'stopButton', 0.5))) ⋁ ",
                "((_state = 'stopped') ⋀ ℛ(setResxValue, 'stopButton', 0.5) ⋀ ↲(ℛ(setResxValue, 'startButton', 0.5))) ⋁ ",
                "↲(startTimer({_company: _company, _startName: 'timerStart', _duration: 20, _name: 'timerGo', _state: _state}))"
            ],
            "timerItems": [
                "_company, _ac, _value | ⋓({_textStyle: ℛ(textStyle, ChoiceButn), _rxName: 'startButton', _se: 'Start'}) ⋀ ",
                "⋓({_c: Φ(Text, {_text: _company, _textStyle: ℛ(textStyle, Title)}), _d: Φ(Text, {_text: ⊤('service'), _textStyle: _textStyle}), ",
                "_dp: Φ(DropdownButton, {_items: services, _hint: ⊤('select one'), _cacheName: (_company + 'Service'), ",
                "_textStyle: _textStyle, _value: _value, _fsmName: 'timerService', _inMap: {_company: _company}}), _di: Φ(Divider, {_thickness: 1.5}), ",
                "_ic: Φ(IconButton, {_onTap: {_func: stopTimer, _tapAction: {_company: _company, _name: 'timerExit'}}, _iconColor: 'grey700', _icon: 'cancel', _iconSize: 16.0})}) ⋀ ",
                "(_dpr ≔ Φ(SizedBox, {_child: Φ(Row, {_children: [_d, _dp], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "(_ac ≔ Φ(Row, {_children: [_ic], _mainAxisAlignment: decode(mainAxisAlignment, end)})) ⋀ (_children ≔ ([_c, _di, _dpr] ⊌ timerRows)) ⋀ ",
                "(_se ≔ 'End') ⋀ (_rxName ≔ 'stopButton') ⋀ (_children ⊌ timerRows) ⋀ mapPat(rowColHeader, (start, spaceEvenly, max, Ø)) ⋀ ",
                "(_inv ≔ Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: (_company + 'Intv')})) ⋀ (_children ⊌ [_di, _inv])",
                "↲(_children)"
            ],
            "timerBegin": [
                "_id, _labelStyle, _dateTimeStyle, _padding | _label ≔ ⊤('begin') "
            ],
            "timeEventRow": [
                "_id, _label, _labelStyle, _dateTimeStyle | mapPat(rowColHeader, (center, spaceEvenly, max, Ø)) ⋀ ",
                "(_children ≔ [Φ(IconButton, {_onTap: {_func: pickDate, _tapAction: {_event: ('date' + _label), _id: _id, _name: ('timerUpdate' + _label)}}, _iconColor: 'btnBlue', _icon: 'calendar'}), ",
                "Φ(IconButton, {_onTap: {_func: pickTime, _tapAction: {_event: ('time' + _label), _id: _id, _name: ('timerUpdate' + _label)}}, _iconColor: 'btnBlue', _icon: 'pickTime'})]) ⋀ ",
                "(_child ≔ Φ(Row)) ⋀ (_width ≔ ℛ(wratio, 50.0)) ⋀ ",
                "(_children ≔ labelOText(_label, _labelStyle, _dateTimeStyle, ('dateTime' + _label + _id))) ⋀ (_children ≪ Φ(SizedBox)) ⋀ ↲(Φ(Row))"
            ],
            "labelOText": [
                "_label, _labelStyle, _oTextStyle, _valueName | ((∄(_labelStyle) ⋀ (_labelStyle ≔ _oTextStyle)) ⋁ (∄(_oTextStyle) ⋀ (_oTextStyle ≔ _labelStyle)) ⋁ (true)) ⋀ ",
                "↲([Φ(Text, {_text: _label, _textStyle: _labelStyle}), Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: _valueName})])"
            ],
            "timerRows": [
                "_company, _se, _textStyle, _di, _rxName, _state | (((_se = 'Start') ⋀ ",
                "(_ih ≔ Φ(IconButton, {_onTap: {_func: startTimer, _tapAction: {_company: _company, _startName: 'timerStart', _duration: 2, _name: 'timerGo', _rxName: _rxName, _state: _state}}, _iconColor: 'red', _icon: 'start'}))) ⋁ ",
                "(_ih ≔ Φ(IconButton, {_func: stopTimer, _tapAction: {_company: _company, _name: 'timerStop', _rxName: _rxName}}, _iconColor: 'red', _icon: 'stop'}))) ⋀ ",
                "⋓({_h: Φ(Text, {_text: ⊤(_se), _textStyle: _textStyle}), _height: ℛ(hratio, Ø, 0.05), ",
                "_d: Φ(Text, {_text: ⊤('date'), _textStyle: _textStyle}), _t: Φ(Text, {_text: ⊤('time'), _textStyle: _textStyle}), ",
                "_id: Φ(IconButton, {_onTap: {_func: pickDate, _tapAction: {_event: ('date' + _se), _company: _company, _name: ('timerUpdate' + _se)}}, _iconColor: 'btnBlue', _icon: 'calendar'}), ",
                "_it: Φ(IconButton, {_onTap: {_func: pickTime, _tapAction: {_event: ('time' + _se), _company: _company, _name: ('timerUpdate' + _se)}}, _iconColor: 'btnBlue', _icon: 'pickTime'})}) ⋀ ",
                "(_dt ≔ Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: ('date' + _se + _company)})) ⋀ ",
                "(_tt ≔ Φ(Obx, {_child: Φ(Text), _valueKey: '_text', _valueName: ('time' + _se + _company)})) ⋀ ",
                "(_dr ≔ Φ(Row, {_children: [_d, _dt]})) ⋀ (_tr ≔ Φ(Row, {_children: [_t, _tt]})) ⋀ ",
                "(_rd ≔ Φ(SizedBox, {_height: _height, _child: Φ(Row, {_children: [_dr, _id], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "(_rt ≔ Φ(SizedBox, {_height: _height, _child: Φ(Row, {_children: [_tr, _it], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "(_rh ≔ Φ(SizedBox, {_height: _height, _child: Φ(Row, {_children: [_h, Φ(ObxOpacity, {_child: _ih, _rxName: _rxName})], _mainAxisAlignment: decode(mainAxisAlignment, spaceBetween)})})) ⋀ ",
                "↲([_di, _rh, _rd, _rt])"
            ],
            "timerSetting": "_company, _dateTime, _event | ↲(setTimer({_inTimer: _dateTime, _company: _company, _event: _event}))",
            "timerUpdateStart": [
                "_company, _dateTime, _event | (timerSetting) ⋀ (_inv ≔ getTimeInterval([_company, 'dhmstr'])) ⋀ ",
                "↲(ℛ(setResxValue, (_company + 'Intv'), (⊤('interval') + _inv)))"
            ],
            "timerUpdateEnd": [
                "_company, _dateTime, _event | ℛ(setResxValue, stopButton, 0.5) ⋀ (timerUpdateStart) ⋀ ↲(stopTimer())"
            ],
            "timerStart": [
                "_company, _state | ℛ(setResxValue, startButton, 0.5) ⋀ ℛ(setResxValue, stopButton, 1.0) ⋀ ((_state = 'started') ⋀ ",
                "↲(setTimer({_company: _company, _event: 'timing'}))) ⋁ ↲(setTimer({_company: _company, _event: 'start'}))"
            ],
            "timerStop": "_company | ℛ(setResxValue, stopButton, 0.5) ⋀ ↲(setTimer({_company: _company, _event: 'stop'}))",
            "timerGo": "_company | (_event ≔ 'timing') ⋀ ↲(timerUpdateStart)",
            "timerExit": "↲(popRoute())",
            "timerService": "_value, _company | (_mtimer ≔ ℛ(getCache, ('timer' + _company))) ⋀ ↲(_mtimer ⊌ {_value: _value})",
            "tabSubView": [
                "_item, _barTitle, _obj | (_viewMap  ≔ {_pageId: _obj['subviewId'], _pageSubmote: _item['id'], _cols: _obj['subviewCols'], ",
                "_processEvent: createEvent(['tabPage', {_item: _item, _obj: _obj}])}) ⋀ (_valueName ≔ _obj['valueName']) ⋀ ↲(subviewPage)"
            ],
            "timerAbort": "_company | ℛ(removeCache, ('timer' + _company)) ⋀ ↲(popRoute())",
            "drawerfsm": "_listItemDetail | popRoute() ⋀ ↲(listPagefsm)",
            "listPagefsm": [
                "_listItemDetail | ℛ(setCache, 'mainListPageCache', _listItemDetail) ⋀ (_event ≔ 'loadData') ⋀ ",
                "listDatafsm ⋀ ↲(ℛ(setResxValue, 'titleName', _listItemDetail['_titleName']))"
            ],
            "listDatafsm": [
                "_event, _value | ((_event = 'loadData') ⋀ dataLoading ⋀ (_m ≔ ℛ(getCache, 'mainListPageCache')) ⋀ ",
                "ℛ(setCache, 'mainListPageEvent', createEvent(['listDatafsm', {_event: 'loaded'}])) ⋀ ↲(getGroupList(_m))) ⋁ ",
                "((_event = 'refresh') ⋀ ↲refresh({_groupName: 'mainListPage'})) ⋁ ",
                "((_event = 'loaded') ⋀ ((∄(_value) ⋀ ↲(ℛ(setResxValue, 'mainListPage', mainContainer))) ⋁ ↲(ℛ(setResxValue, 'mainListPage', listPage)))) ⋁ ",
                "((_event = 'selected') ⋀ setCache('tabInx', 0) ⋀ setCache('selItem', _value) ⋀ ↲(route('pageScaffold', {_item: _value, _cacheName: 'mainListPageCache'})))"
            ],
            "addObjfsm": [
                "(_inx ≔ getCache('tabInx')) ⋀ (_listItemDetail ≔ getCache('mainListPageCache')) ⋀ (_subviewObj ≔ _listItemDetail['_subviewObj']) ⋀ ",
                "↲(route('formScaffold', {_object: _subviewObj[_inx], _formData: {}, _fsm: 'saveObjfsm'}))"
            ],
            "saveMainfsm": "popRoute() ⋀ ↲(refresh({_groupName: 'mainListPage'}))",
            "saveObjfsm": "popRoute() ⋀ popRoute() ⋀ ↲(route('pageScaffold', {_item: getCache('selItem'), _cacheName: 'mainListPageCache'}))",
            "dataLoading": [
                "⋓({_child: Φ(ProgressText, {_text: 'Loading data with end to end encryption ....', _textStyle : ℛ(textStyle, Normal16)}), ",
                "_alignment: decode(alignment, center)}) ⋀ ↲(ℛ(setResxValue, 'mainListPage', mainContainer))"
            ],
            "tabPage": [
                "_item, _obj, _value | mapPat(rowColHeader, (center, start, max, Ø)) ⋀ (_n ≔ 0) ⋀ (_subviews ≔ _obj['subviews']) ⋀ ",
                "(_t ≔ #(_subviews)) ⋀ (_tabs ≔ _obj['subviewTabs']) ⋀ (_top ≔ _obj['topCard']) ⋀ ",
                "(_tc ≔ []) ⋀ (_children ≔ [_top, tabView]) ⋀ ↲(ℛ(setResxValue, _obj['valueName'], Φ(Column)))"
            ],
            "tapIconElem": [
                "_icon, _text, _iconColor, _onTap, _tapAction | ⋓({_borderColor: ℛ(color, 'grey'), _borderWidth: 2.0, _width: ℛ(swratio, Ø, 0.25), _noShadow: true, ",
                "_textAlign: decode(textAlign, center), _iconSize: 30.0}) ⋀ ",
                "⋓({_child: Φ(Text), _i: Φ(Icon)}) ⋀ ",
                "(_child ≔ Φ(Column, {_children: [_i, Φ(Container)], _mainAxisAlignment: decode(mainAxisAlignment, spaceEvenly)})) ⋀ ",
                "(_height ≔ (_width * 0.85)) ⋀ ↲(Φ(TapItem, {_child: Φ(ColorButton), _onTap: _onTap, _tapAction: _tapAction}))"
            ],
            "pageScaffold": [
                "_item, _cacheName | (_cache ≔ getCache(_cacheName)) ⋀ (_pageBody ≔ _cache['_pageBody']) ⋀ (_body ≔ _pageBody) ⋀ ",
                "(_floatingAction ≔ Φ(FloatingAction, {_icon: 'add', _iconColor: 'white', _iconSize: 40.0, ",
                "_onTap: {_func: 'fsmEvent', _tapAction: 'addObjfsm'}})) ⋀ ",
                "⋓({_title: pageAppBar, _leading: Φ(IconButton, {_icon: 'back', _iconColor: ℛ(color, 'white'), _onTap: {_func: popRoute}})}) ⋀ ↲(scaffoldPat)"
            ],
            "pageAppBar": [
                "_flexibleSpace, _barTitle | (_flexibleSpace ≔ Φ(Container, {_decoration: ℛ(appRes, blueGradBD)})) ⋀ ",
                "↲(Φ(Text, {_text: _barTitle, _textStyle: ℛ(textStyle, TopicTxtStyle)}))"
            ],
            "subviewPage": [
                "_item, _valueName, _viewMap | (getResxValue(_valueName) ⋁ ℛ(setResxValue, _valueName, Φ(ProgressText, {_text: 'Loading data ....', ",
                "_textStyle : ℛ(textStyle, Normal16)}))) ⋀ (getSubview(_viewMap)) ⋀ ↲(Φ(Obx, {_child: Φ(Container), _valueName: _valueName}))"
            ],
            "tabView": [
                "_value, _subviews, _tabs, _n, _t, _tc | ((_n = _t) ⋀ (_children ≔ _tc) ⋀ (_physics ≔ ℛ(appRes, clampingScrollPhysics)) ⋀ ",
                "(_inxName ≔ 'tabInx') ⋀ ↲(Φ(TabColumn))) ⋁ (mapPat(rowColHeader, (center, start, max, Ø)) ⋀ ⋓({_data: _value[_n], _pat: _subviews[_n]}) ⋀ ",
                "((∄(_value[_n]) ⋀ (_tc ≪  Φ(Container))) ⋁ ((_children ≔ itItems) ⋀ (_tc ≪ Φ(ListView)))) ⋀ ",
                "(_n ≔ (_n + 1)) ⋀ ↲(tabView))"
            ],
            "card": [
                "_child |⋓({_child: Φ(Padding, {_child: _child, _padding: ℛ(appRes, boxPadding)}), _elevation: ℛ(hratio, Ø, 0.01), ",
                "_cardRadius: ℛ(hratio, Ø, 0.015)}) ⋀ ↲(Φ(SizedBox, {_child: Φ(Card), _width: ℛ(swratio, Ø, 0.995)}))"
            ],
            "formScaffold": [
                "_object, _formData, _fsm | (_barTitle ≔ ⊤(ç(_object))) ⋀ ⋓({_title: pageAppBar, ",
                "_body: Φ(Container, {_child: Φ(EntityForm, {_object: ç(_object), _formData: _formData, _onTap: {_func: 'fsmEvent', _tapAction: ç(_fsm)}})})}) ⋀ ↲(scaffoldPat)"
            ],
            "padRow": "_children, _alignment | mapPat(rowColHeader, (center, _alignment, max, Ø)) ⋀ ↲(Φ(Padding, {_child: Φ(Row), _padding: ℛ(h20Padding)}))",
            "cardConst": "_dec, _div, _height | ↲(⋓({_dec: ℛ(textStyle, Normal16), _div: Φ(Divider, {_thickness: 1.5}), _height: ℛ(hratio, Ø, 0.0468)}))",
            "testBox": "(_text ≔ ⊤(testText)) ⋀ (_child ≔ Φ(Text)) ⋀ ƒ(mapPat, (patHeader, (Ø, Ø, #FFFFFF, Ø, topCenter, Ø))) ⋀ ↲(Φ(Container))"
        }
    },
    "stateData": {}
}